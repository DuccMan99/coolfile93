/* opcodes_cb.c: Z80 CBxx opcodes
   Copyright (c) 1999-2008 Philip Kendall, Matthew Westcott

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
    Contact details: <matthew@west.co.tt>
    Matthew Westcott, 14 Daisy Hill Drive, Adlington, Chorley, Lancs PR6 9NE UNITED KINGDOM

*/

/* NB: this file is autogenerated by 'z80.pl' from 'opcodes_cb.dat',
   and included in 'z80_ops.jscpp' */

    ops[0x00] = function op_0x00(tempaddr) {		/* RLC B */
      RLC(B);
    };
    ops[0x01] = function op_0x01(tempaddr) {		/* RLC C */
      RLC(C);
    };
    ops[0x02] = function op_0x02(tempaddr) {		/* RLC D */
      RLC(D);
    };
    ops[0x03] = function op_0x03(tempaddr) {		/* RLC E */
      RLC(E);
    };
    ops[0x04] = function op_0x04(tempaddr) {		/* RLC H */
      RLC(H);
    };
    ops[0x05] = function op_0x05(tempaddr) {		/* RLC L */
      RLC(L);
    };
    ops[0x06] = function op_0x06(tempaddr) {		/* RLC (HL) */
      {
    var bytetemp = readbyte(HLR);
    tstates+=7;
    RLC(bytetemp);
    writebyte(HLR,bytetemp);
      }
    };
    ops[0x07] = function op_0x07(tempaddr) {		/* RLC A */
      RLC(A);
    };
    ops[0x08] = function op_0x08(tempaddr) {		/* RRC B */
      RRC(B);
    };
    ops[0x09] = function op_0x09(tempaddr) {		/* RRC C */
      RRC(C);
    };
    ops[0x0a] = function op_0x0a(tempaddr) {		/* RRC D */
      RRC(D);
    };
    ops[0x0b] = function op_0x0b(tempaddr) {		/* RRC E */
      RRC(E);
    };
    ops[0x0c] = function op_0x0c(tempaddr) {		/* RRC H */
      RRC(H);
    };
    ops[0x0d] = function op_0x0d(tempaddr) {		/* RRC L */
      RRC(L);
    };
    ops[0x0e] = function op_0x0e(tempaddr) {		/* RRC (HL) */
      {
    var bytetemp = readbyte(HLR);
    tstates+=7;
    RRC(bytetemp);
    writebyte(HLR,bytetemp);
      }
    };
    ops[0x0f] = function op_0x0f(tempaddr) {		/* RRC A */
      RRC(A);
    };
    ops[0x10] = function op_0x10(tempaddr) {		/* RL B */
      RL(B);
    };
    ops[0x11] = function op_0x11(tempaddr) {		/* RL C */
      RL(C);
    };
    ops[0x12] = function op_0x12(tempaddr) {		/* RL D */
      RL(D);
    };
    ops[0x13] = function op_0x13(tempaddr) {		/* RL E */
      RL(E);
    };
    ops[0x14] = function op_0x14(tempaddr) {		/* RL H */
      RL(H);
    };
    ops[0x15] = function op_0x15(tempaddr) {		/* RL L */
      RL(L);
    };
    ops[0x16] = function op_0x16(tempaddr) {		/* RL (HL) */
      {
    var bytetemp = readbyte(HLR);
    tstates+=7;
    RL(bytetemp);
    writebyte(HLR,bytetemp);
      }
    };
    ops[0x17] = function op_0x17(tempaddr) {		/* RL A */
      RL(A);
    };
    ops[0x18] = function op_0x18(tempaddr) {		/* RR B */
      RR(B);
    };
    ops[0x19] = function op_0x19(tempaddr) {		/* RR C */
      RR(C);
    };
    ops[0x1a] = function op_0x1a(tempaddr) {		/* RR D */
      RR(D);
    };
    ops[0x1b] = function op_0x1b(tempaddr) {		/* RR E */
      RR(E);
    };
    ops[0x1c] = function op_0x1c(tempaddr) {		/* RR H */
      RR(H);
    };
    ops[0x1d] = function op_0x1d(tempaddr) {		/* RR L */
      RR(L);
    };
    ops[0x1e] = function op_0x1e(tempaddr) {		/* RR (HL) */
      {
    var bytetemp = readbyte(HLR);
    tstates+=7;
    RR(bytetemp);
    writebyte(HLR,bytetemp);
      }
    };
    ops[0x1f] = function op_0x1f(tempaddr) {		/* RR A */
      RR(A);
    };
    ops[0x20] = function op_0x20(tempaddr) {		/* SLA B */
      SLA(B);
    };
    ops[0x21] = function op_0x21(tempaddr) {		/* SLA C */
      SLA(C);
    };
    ops[0x22] = function op_0x22(tempaddr) {		/* SLA D */
      SLA(D);
    };
    ops[0x23] = function op_0x23(tempaddr) {		/* SLA E */
      SLA(E);
    };
    ops[0x24] = function op_0x24(tempaddr) {		/* SLA H */
      SLA(H);
    };
    ops[0x25] = function op_0x25(tempaddr) {		/* SLA L */
      SLA(L);
    };
    ops[0x26] = function op_0x26(tempaddr) {		/* SLA (HL) */
      {
    var bytetemp = readbyte(HLR);
    tstates+=7;
    SLA(bytetemp);
    writebyte(HLR,bytetemp);
      }
    };
    ops[0x27] = function op_0x27(tempaddr) {		/* SLA A */
      SLA(A);
    };
    ops[0x28] = function op_0x28(tempaddr) {		/* SRA B */
      SRA(B);
    };
    ops[0x29] = function op_0x29(tempaddr) {		/* SRA C */
      SRA(C);
    };
    ops[0x2a] = function op_0x2a(tempaddr) {		/* SRA D */
      SRA(D);
    };
    ops[0x2b] = function op_0x2b(tempaddr) {		/* SRA E */
      SRA(E);
    };
    ops[0x2c] = function op_0x2c(tempaddr) {		/* SRA H */
      SRA(H);
    };
    ops[0x2d] = function op_0x2d(tempaddr) {		/* SRA L */
      SRA(L);
    };
    ops[0x2e] = function op_0x2e(tempaddr) {		/* SRA (HL) */
      {
    var bytetemp = readbyte(HLR);
    tstates+=7;
    SRA(bytetemp);
    writebyte(HLR,bytetemp);
      }
    };
    ops[0x2f] = function op_0x2f(tempaddr) {		/* SRA A */
      SRA(A);
    };
    ops[0x30] = function op_0x30(tempaddr) {		/* SLL B */
      SLL(B);
    };
    ops[0x31] = function op_0x31(tempaddr) {		/* SLL C */
      SLL(C);
    };
    ops[0x32] = function op_0x32(tempaddr) {		/* SLL D */
      SLL(D);
    };
    ops[0x33] = function op_0x33(tempaddr) {		/* SLL E */
      SLL(E);
    };
    ops[0x34] = function op_0x34(tempaddr) {		/* SLL H */
      SLL(H);
    };
    ops[0x35] = function op_0x35(tempaddr) {		/* SLL L */
      SLL(L);
    };
    ops[0x36] = function op_0x36(tempaddr) {		/* SLL (HL) */
      {
    var bytetemp = readbyte(HLR);
    tstates+=7;
    SLL(bytetemp);
    writebyte(HLR,bytetemp);
      }
    };
    ops[0x37] = function op_0x37(tempaddr) {		/* SLL A */
      SLL(A);
    };
    ops[0x38] = function op_0x38(tempaddr) {		/* SRL B */
      SRL(B);
    };
    ops[0x39] = function op_0x39(tempaddr) {		/* SRL C */
      SRL(C);
    };
    ops[0x3a] = function op_0x3a(tempaddr) {		/* SRL D */
      SRL(D);
    };
    ops[0x3b] = function op_0x3b(tempaddr) {		/* SRL E */
      SRL(E);
    };
    ops[0x3c] = function op_0x3c(tempaddr) {		/* SRL H */
      SRL(H);
    };
    ops[0x3d] = function op_0x3d(tempaddr) {		/* SRL L */
      SRL(L);
    };
    ops[0x3e] = function op_0x3e(tempaddr) {		/* SRL (HL) */
      {
    var bytetemp = readbyte(HLR);
    tstates+=7;
    SRL(bytetemp);
    writebyte(HLR,bytetemp);
      }
    };
    ops[0x3f] = function op_0x3f(tempaddr) {		/* SRL A */
      SRL(A);
    };
    ops[0x40] = function op_0x40(tempaddr) {		/* BIT 0,B */
      BIT( 0, B );
    };
    ops[0x41] = function op_0x41(tempaddr) {		/* BIT 0,C */
      BIT( 0, C );
    };
    ops[0x42] = function op_0x42(tempaddr) {		/* BIT 0,D */
      BIT( 0, D );
    };
    ops[0x43] = function op_0x43(tempaddr) {		/* BIT 0,E */
      BIT( 0, E );
    };
    ops[0x44] = function op_0x44(tempaddr) {		/* BIT 0,H */
      BIT( 0, H );
    };
    ops[0x45] = function op_0x45(tempaddr) {		/* BIT 0,L */
      BIT( 0, L );
    };
    ops[0x46] = function op_0x46(tempaddr) {		/* BIT 0,(HL) */
      {
    var bytetemp = readbyte( HLR );
    tstates+=4;
    BIT( 0, bytetemp);
      }
    };
    ops[0x47] = function op_0x47(tempaddr) {		/* BIT 0,A */
      BIT( 0, A );
    };
    ops[0x48] = function op_0x48(tempaddr) {		/* BIT 1,B */
      BIT( 1, B );
    };
    ops[0x49] = function op_0x49(tempaddr) {		/* BIT 1,C */
      BIT( 1, C );
    };
    ops[0x4a] = function op_0x4a(tempaddr) {		/* BIT 1,D */
      BIT( 1, D );
    };
    ops[0x4b] = function op_0x4b(tempaddr) {		/* BIT 1,E */
      BIT( 1, E );
    };
    ops[0x4c] = function op_0x4c(tempaddr) {		/* BIT 1,H */
      BIT( 1, H );
    };
    ops[0x4d] = function op_0x4d(tempaddr) {		/* BIT 1,L */
      BIT( 1, L );
    };
    ops[0x4e] = function op_0x4e(tempaddr) {		/* BIT 1,(HL) */
      {
    var bytetemp = readbyte( HLR );
    tstates+=4;
    BIT( 1, bytetemp);
      }
    };
    ops[0x4f] = function op_0x4f(tempaddr) {		/* BIT 1,A */
      BIT( 1, A );
    };
    ops[0x50] = function op_0x50(tempaddr) {		/* BIT 2,B */
      BIT( 2, B );
    };
    ops[0x51] = function op_0x51(tempaddr) {		/* BIT 2,C */
      BIT( 2, C );
    };
    ops[0x52] = function op_0x52(tempaddr) {		/* BIT 2,D */
      BIT( 2, D );
    };
    ops[0x53] = function op_0x53(tempaddr) {		/* BIT 2,E */
      BIT( 2, E );
    };
    ops[0x54] = function op_0x54(tempaddr) {		/* BIT 2,H */
      BIT( 2, H );
    };
    ops[0x55] = function op_0x55(tempaddr) {		/* BIT 2,L */
      BIT( 2, L );
    };
    ops[0x56] = function op_0x56(tempaddr) {		/* BIT 2,(HL) */
      {
    var bytetemp = readbyte( HLR );
    tstates+=4;
    BIT( 2, bytetemp);
      }
    };
    ops[0x57] = function op_0x57(tempaddr) {		/* BIT 2,A */
      BIT( 2, A );
    };
    ops[0x58] = function op_0x58(tempaddr) {		/* BIT 3,B */
      BIT( 3, B );
    };
    ops[0x59] = function op_0x59(tempaddr) {		/* BIT 3,C */
      BIT( 3, C );
    };
    ops[0x5a] = function op_0x5a(tempaddr) {		/* BIT 3,D */
      BIT( 3, D );
    };
    ops[0x5b] = function op_0x5b(tempaddr) {		/* BIT 3,E */
      BIT( 3, E );
    };
    ops[0x5c] = function op_0x5c(tempaddr) {		/* BIT 3,H */
      BIT( 3, H );
    };
    ops[0x5d] = function op_0x5d(tempaddr) {		/* BIT 3,L */
      BIT( 3, L );
    };
    ops[0x5e] = function op_0x5e(tempaddr) {		/* BIT 3,(HL) */
      {
    var bytetemp = readbyte( HLR );
    tstates+=4;
    BIT( 3, bytetemp);
      }
    };
    ops[0x5f] = function op_0x5f(tempaddr) {		/* BIT 3,A */
      BIT( 3, A );
    };
    ops[0x60] = function op_0x60(tempaddr) {		/* BIT 4,B */
      BIT( 4, B );
    };
    ops[0x61] = function op_0x61(tempaddr) {		/* BIT 4,C */
      BIT( 4, C );
    };
    ops[0x62] = function op_0x62(tempaddr) {		/* BIT 4,D */
      BIT( 4, D );
    };
    ops[0x63] = function op_0x63(tempaddr) {		/* BIT 4,E */
      BIT( 4, E );
    };
    ops[0x64] = function op_0x64(tempaddr) {		/* BIT 4,H */
      BIT( 4, H );
    };
    ops[0x65] = function op_0x65(tempaddr) {		/* BIT 4,L */
      BIT( 4, L );
    };
    ops[0x66] = function op_0x66(tempaddr) {		/* BIT 4,(HL) */
      {
    var bytetemp = readbyte( HLR );
    tstates+=4;
    BIT( 4, bytetemp);
      }
    };
    ops[0x67] = function op_0x67(tempaddr) {		/* BIT 4,A */
      BIT( 4, A );
    };
    ops[0x68] = function op_0x68(tempaddr) {		/* BIT 5,B */
      BIT( 5, B );
    };
    ops[0x69] = function op_0x69(tempaddr) {		/* BIT 5,C */
      BIT( 5, C );
    };
    ops[0x6a] = function op_0x6a(tempaddr) {		/* BIT 5,D */
      BIT( 5, D );
    };
    ops[0x6b] = function op_0x6b(tempaddr) {		/* BIT 5,E */
      BIT( 5, E );
    };
    ops[0x6c] = function op_0x6c(tempaddr) {		/* BIT 5,H */
      BIT( 5, H );
    };
    ops[0x6d] = function op_0x6d(tempaddr) {		/* BIT 5,L */
      BIT( 5, L );
    };
    ops[0x6e] = function op_0x6e(tempaddr) {		/* BIT 5,(HL) */
      {
    var bytetemp = readbyte( HLR );
    tstates+=4;
    BIT( 5, bytetemp);
      }
    };
    ops[0x6f] = function op_0x6f(tempaddr) {		/* BIT 5,A */
      BIT( 5, A );
    };
    ops[0x70] = function op_0x70(tempaddr) {		/* BIT 6,B */
      BIT( 6, B );
    };
    ops[0x71] = function op_0x71(tempaddr) {		/* BIT 6,C */
      BIT( 6, C );
    };
    ops[0x72] = function op_0x72(tempaddr) {		/* BIT 6,D */
      BIT( 6, D );
    };
    ops[0x73] = function op_0x73(tempaddr) {		/* BIT 6,E */
      BIT( 6, E );
    };
    ops[0x74] = function op_0x74(tempaddr) {		/* BIT 6,H */
      BIT( 6, H );
    };
    ops[0x75] = function op_0x75(tempaddr) {		/* BIT 6,L */
      BIT( 6, L );
    };
    ops[0x76] = function op_0x76(tempaddr) {		/* BIT 6,(HL) */
      {
    var bytetemp = readbyte( HLR );
    tstates+=4;
    BIT( 6, bytetemp);
      }
    };
    ops[0x77] = function op_0x77(tempaddr) {		/* BIT 6,A */
      BIT( 6, A );
    };
    ops[0x78] = function op_0x78(tempaddr) {		/* BIT 7,B */
      BIT( 7, B );
    };
    ops[0x79] = function op_0x79(tempaddr) {		/* BIT 7,C */
      BIT( 7, C );
    };
    ops[0x7a] = function op_0x7a(tempaddr) {		/* BIT 7,D */
      BIT( 7, D );
    };
    ops[0x7b] = function op_0x7b(tempaddr) {		/* BIT 7,E */
      BIT( 7, E );
    };
    ops[0x7c] = function op_0x7c(tempaddr) {		/* BIT 7,H */
      BIT( 7, H );
    };
    ops[0x7d] = function op_0x7d(tempaddr) {		/* BIT 7,L */
      BIT( 7, L );
    };
    ops[0x7e] = function op_0x7e(tempaddr) {		/* BIT 7,(HL) */
      {
    var bytetemp = readbyte( HLR );
    tstates+=4;
    BIT( 7, bytetemp);
      }
    };
    ops[0x7f] = function op_0x7f(tempaddr) {		/* BIT 7,A */
      BIT( 7, A );
    };
    ops[0x80] = function op_0x80(tempaddr) {		/* RES 0,B */
      B &= 0xfe;
    };
    ops[0x81] = function op_0x81(tempaddr) {		/* RES 0,C */
      C &= 0xfe;
    };
    ops[0x82] = function op_0x82(tempaddr) {		/* RES 0,D */
      D &= 0xfe;
    };
    ops[0x83] = function op_0x83(tempaddr) {		/* RES 0,E */
      E &= 0xfe;
    };
    ops[0x84] = function op_0x84(tempaddr) {		/* RES 0,H */
      H &= 0xfe;
    };
    ops[0x85] = function op_0x85(tempaddr) {		/* RES 0,L */
      L &= 0xfe;
    };
    ops[0x86] = function op_0x86(tempaddr) {		/* RES 0,(HL) */
      tstates+=7;
      writebyte(HLR, readbyte(HLR) & 0xfe);
    };
    ops[0x87] = function op_0x87(tempaddr) {		/* RES 0,A */
      A &= 0xfe;
    };
    ops[0x88] = function op_0x88(tempaddr) {		/* RES 1,B */
      B &= 0xfd;
    };
    ops[0x89] = function op_0x89(tempaddr) {		/* RES 1,C */
      C &= 0xfd;
    };
    ops[0x8a] = function op_0x8a(tempaddr) {		/* RES 1,D */
      D &= 0xfd;
    };
    ops[0x8b] = function op_0x8b(tempaddr) {		/* RES 1,E */
      E &= 0xfd;
    };
    ops[0x8c] = function op_0x8c(tempaddr) {		/* RES 1,H */
      H &= 0xfd;
    };
    ops[0x8d] = function op_0x8d(tempaddr) {		/* RES 1,L */
      L &= 0xfd;
    };
    ops[0x8e] = function op_0x8e(tempaddr) {		/* RES 1,(HL) */
      tstates+=7;
      writebyte(HLR, readbyte(HLR) & 0xfd);
    };
    ops[0x8f] = function op_0x8f(tempaddr) {		/* RES 1,A */
      A &= 0xfd;
    };
    ops[0x90] = function op_0x90(tempaddr) {		/* RES 2,B */
      B &= 0xfb;
    };
    ops[0x91] = function op_0x91(tempaddr) {		/* RES 2,C */
      C &= 0xfb;
    };
    ops[0x92] = function op_0x92(tempaddr) {		/* RES 2,D */
      D &= 0xfb;
    };
    ops[0x93] = function op_0x93(tempaddr) {		/* RES 2,E */
      E &= 0xfb;
    };
    ops[0x94] = function op_0x94(tempaddr) {		/* RES 2,H */
      H &= 0xfb;
    };
    ops[0x95] = function op_0x95(tempaddr) {		/* RES 2,L */
      L &= 0xfb;
    };
    ops[0x96] = function op_0x96(tempaddr) {		/* RES 2,(HL) */
      tstates+=7;
      writebyte(HLR, readbyte(HLR) & 0xfb);
    };
    ops[0x97] = function op_0x97(tempaddr) {		/* RES 2,A */
      A &= 0xfb;
    };
    ops[0x98] = function op_0x98(tempaddr) {		/* RES 3,B */
      B &= 0xf7;
    };
    ops[0x99] = function op_0x99(tempaddr) {		/* RES 3,C */
      C &= 0xf7;
    };
    ops[0x9a] = function op_0x9a(tempaddr) {		/* RES 3,D */
      D &= 0xf7;
    };
    ops[0x9b] = function op_0x9b(tempaddr) {		/* RES 3,E */
      E &= 0xf7;
    };
    ops[0x9c] = function op_0x9c(tempaddr) {		/* RES 3,H */
      H &= 0xf7;
    };
    ops[0x9d] = function op_0x9d(tempaddr) {		/* RES 3,L */
      L &= 0xf7;
    };
    ops[0x9e] = function op_0x9e(tempaddr) {		/* RES 3,(HL) */
      tstates+=7;
      writebyte(HLR, readbyte(HLR) & 0xf7);
    };
    ops[0x9f] = function op_0x9f(tempaddr) {		/* RES 3,A */
      A &= 0xf7;
    };
    ops[0xa0] = function op_0xa0(tempaddr) {		/* RES 4,B */
      B &= 0xef;
    };
    ops[0xa1] = function op_0xa1(tempaddr) {		/* RES 4,C */
      C &= 0xef;
    };
    ops[0xa2] = function op_0xa2(tempaddr) {		/* RES 4,D */
      D &= 0xef;
    };
    ops[0xa3] = function op_0xa3(tempaddr) {		/* RES 4,E */
      E &= 0xef;
    };
    ops[0xa4] = function op_0xa4(tempaddr) {		/* RES 4,H */
      H &= 0xef;
    };
    ops[0xa5] = function op_0xa5(tempaddr) {		/* RES 4,L */
      L &= 0xef;
    };
    ops[0xa6] = function op_0xa6(tempaddr) {		/* RES 4,(HL) */
      tstates+=7;
      writebyte(HLR, readbyte(HLR) & 0xef);
    };
    ops[0xa7] = function op_0xa7(tempaddr) {		/* RES 4,A */
      A &= 0xef;
    };
    ops[0xa8] = function op_0xa8(tempaddr) {		/* RES 5,B */
      B &= 0xdf;
    };
    ops[0xa9] = function op_0xa9(tempaddr) {		/* RES 5,C */
      C &= 0xdf;
    };
    ops[0xaa] = function op_0xaa(tempaddr) {		/* RES 5,D */
      D &= 0xdf;
    };
    ops[0xab] = function op_0xab(tempaddr) {		/* RES 5,E */
      E &= 0xdf;
    };
    ops[0xac] = function op_0xac(tempaddr) {		/* RES 5,H */
      H &= 0xdf;
    };
    ops[0xad] = function op_0xad(tempaddr) {		/* RES 5,L */
      L &= 0xdf;
    };
    ops[0xae] = function op_0xae(tempaddr) {		/* RES 5,(HL) */
      tstates+=7;
      writebyte(HLR, readbyte(HLR) & 0xdf);
    };
    ops[0xaf] = function op_0xaf(tempaddr) {		/* RES 5,A */
      A &= 0xdf;
    };
    ops[0xb0] = function op_0xb0(tempaddr) {		/* RES 6,B */
      B &= 0xbf;
    };
    ops[0xb1] = function op_0xb1(tempaddr) {		/* RES 6,C */
      C &= 0xbf;
    };
    ops[0xb2] = function op_0xb2(tempaddr) {		/* RES 6,D */
      D &= 0xbf;
    };
    ops[0xb3] = function op_0xb3(tempaddr) {		/* RES 6,E */
      E &= 0xbf;
    };
    ops[0xb4] = function op_0xb4(tempaddr) {		/* RES 6,H */
      H &= 0xbf;
    };
    ops[0xb5] = function op_0xb5(tempaddr) {		/* RES 6,L */
      L &= 0xbf;
    };
    ops[0xb6] = function op_0xb6(tempaddr) {		/* RES 6,(HL) */
      tstates+=7;
      writebyte(HLR, readbyte(HLR) & 0xbf);
    };
    ops[0xb7] = function op_0xb7(tempaddr) {		/* RES 6,A */
      A &= 0xbf;
    };
    ops[0xb8] = function op_0xb8(tempaddr) {		/* RES 7,B */
      B &= 0x7f;
    };
    ops[0xb9] = function op_0xb9(tempaddr) {		/* RES 7,C */
      C &= 0x7f;
    };
    ops[0xba] = function op_0xba(tempaddr) {		/* RES 7,D */
      D &= 0x7f;
    };
    ops[0xbb] = function op_0xbb(tempaddr) {		/* RES 7,E */
      E &= 0x7f;
    };
    ops[0xbc] = function op_0xbc(tempaddr) {		/* RES 7,H */
      H &= 0x7f;
    };
    ops[0xbd] = function op_0xbd(tempaddr) {		/* RES 7,L */
      L &= 0x7f;
    };
    ops[0xbe] = function op_0xbe(tempaddr) {		/* RES 7,(HL) */
      tstates+=7;
      writebyte(HLR, readbyte(HLR) & 0x7f);
    };
    ops[0xbf] = function op_0xbf(tempaddr) {		/* RES 7,A */
      A &= 0x7f;
    };
    ops[0xc0] = function op_0xc0(tempaddr) {		/* SET 0,B */
      B |= 0x01;
    };
    ops[0xc1] = function op_0xc1(tempaddr) {		/* SET 0,C */
      C |= 0x01;
    };
    ops[0xc2] = function op_0xc2(tempaddr) {		/* SET 0,D */
      D |= 0x01;
    };
    ops[0xc3] = function op_0xc3(tempaddr) {		/* SET 0,E */
      E |= 0x01;
    };
    ops[0xc4] = function op_0xc4(tempaddr) {		/* SET 0,H */
      H |= 0x01;
    };
    ops[0xc5] = function op_0xc5(tempaddr) {		/* SET 0,L */
      L |= 0x01;
    };
    ops[0xc6] = function op_0xc6(tempaddr) {		/* SET 0,(HL) */
      tstates+=7;
      writebyte(HLR, readbyte(HLR) | 0x01);
    };
    ops[0xc7] = function op_0xc7(tempaddr) {		/* SET 0,A */
      A |= 0x01;
    };
    ops[0xc8] = function op_0xc8(tempaddr) {		/* SET 1,B */
      B |= 0x02;
    };
    ops[0xc9] = function op_0xc9(tempaddr) {		/* SET 1,C */
      C |= 0x02;
    };
    ops[0xca] = function op_0xca(tempaddr) {		/* SET 1,D */
      D |= 0x02;
    };
    ops[0xcb] = function op_0xcb(tempaddr) {		/* SET 1,E */
      E |= 0x02;
    };
    ops[0xcc] = function op_0xcc(tempaddr) {		/* SET 1,H */
      H |= 0x02;
    };
    ops[0xcd] = function op_0xcd(tempaddr) {		/* SET 1,L */
      L |= 0x02;
    };
    ops[0xce] = function op_0xce(tempaddr) {		/* SET 1,(HL) */
      tstates+=7;
      writebyte(HLR, readbyte(HLR) | 0x02);
    };
    ops[0xcf] = function op_0xcf(tempaddr) {		/* SET 1,A */
      A |= 0x02;
    };
    ops[0xd0] = function op_0xd0(tempaddr) {		/* SET 2,B */
      B |= 0x04;
    };
    ops[0xd1] = function op_0xd1(tempaddr) {		/* SET 2,C */
      C |= 0x04;
    };
    ops[0xd2] = function op_0xd2(tempaddr) {		/* SET 2,D */
      D |= 0x04;
    };
    ops[0xd3] = function op_0xd3(tempaddr) {		/* SET 2,E */
      E |= 0x04;
    };
    ops[0xd4] = function op_0xd4(tempaddr) {		/* SET 2,H */
      H |= 0x04;
    };
    ops[0xd5] = function op_0xd5(tempaddr) {		/* SET 2,L */
      L |= 0x04;
    };
    ops[0xd6] = function op_0xd6(tempaddr) {		/* SET 2,(HL) */
      tstates+=7;
      writebyte(HLR, readbyte(HLR) | 0x04);
    };
    ops[0xd7] = function op_0xd7(tempaddr) {		/* SET 2,A */
      A |= 0x04;
    };
    ops[0xd8] = function op_0xd8(tempaddr) {		/* SET 3,B */
      B |= 0x08;
    };
    ops[0xd9] = function op_0xd9(tempaddr) {		/* SET 3,C */
      C |= 0x08;
    };
    ops[0xda] = function op_0xda(tempaddr) {		/* SET 3,D */
      D |= 0x08;
    };
    ops[0xdb] = function op_0xdb(tempaddr) {		/* SET 3,E */
      E |= 0x08;
    };
    ops[0xdc] = function op_0xdc(tempaddr) {		/* SET 3,H */
      H |= 0x08;
    };
    ops[0xdd] = function op_0xdd(tempaddr) {		/* SET 3,L */
      L |= 0x08;
    };
    ops[0xde] = function op_0xde(tempaddr) {		/* SET 3,(HL) */
      tstates+=7;
      writebyte(HLR, readbyte(HLR) | 0x08);
    };
    ops[0xdf] = function op_0xdf(tempaddr) {		/* SET 3,A */
      A |= 0x08;
    };
    ops[0xe0] = function op_0xe0(tempaddr) {		/* SET 4,B */
      B |= 0x10;
    };
    ops[0xe1] = function op_0xe1(tempaddr) {		/* SET 4,C */
      C |= 0x10;
    };
    ops[0xe2] = function op_0xe2(tempaddr) {		/* SET 4,D */
      D |= 0x10;
    };
    ops[0xe3] = function op_0xe3(tempaddr) {		/* SET 4,E */
      E |= 0x10;
    };
    ops[0xe4] = function op_0xe4(tempaddr) {		/* SET 4,H */
      H |= 0x10;
    };
    ops[0xe5] = function op_0xe5(tempaddr) {		/* SET 4,L */
      L |= 0x10;
    };
    ops[0xe6] = function op_0xe6(tempaddr) {		/* SET 4,(HL) */
      tstates+=7;
      writebyte(HLR, readbyte(HLR) | 0x10);
    };
    ops[0xe7] = function op_0xe7(tempaddr) {		/* SET 4,A */
      A |= 0x10;
    };
    ops[0xe8] = function op_0xe8(tempaddr) {		/* SET 5,B */
      B |= 0x20;
    };
    ops[0xe9] = function op_0xe9(tempaddr) {		/* SET 5,C */
      C |= 0x20;
    };
    ops[0xea] = function op_0xea(tempaddr) {		/* SET 5,D */
      D |= 0x20;
    };
    ops[0xeb] = function op_0xeb(tempaddr) {		/* SET 5,E */
      E |= 0x20;
    };
    ops[0xec] = function op_0xec(tempaddr) {		/* SET 5,H */
      H |= 0x20;
    };
    ops[0xed] = function op_0xed(tempaddr) {		/* SET 5,L */
      L |= 0x20;
    };
    ops[0xee] = function op_0xee(tempaddr) {		/* SET 5,(HL) */
      tstates+=7;
      writebyte(HLR, readbyte(HLR) | 0x20);
    };
    ops[0xef] = function op_0xef(tempaddr) {		/* SET 5,A */
      A |= 0x20;
    };
    ops[0xf0] = function op_0xf0(tempaddr) {		/* SET 6,B */
      B |= 0x40;
    };
    ops[0xf1] = function op_0xf1(tempaddr) {		/* SET 6,C */
      C |= 0x40;
    };
    ops[0xf2] = function op_0xf2(tempaddr) {		/* SET 6,D */
      D |= 0x40;
    };
    ops[0xf3] = function op_0xf3(tempaddr) {		/* SET 6,E */
      E |= 0x40;
    };
    ops[0xf4] = function op_0xf4(tempaddr) {		/* SET 6,H */
      H |= 0x40;
    };
    ops[0xf5] = function op_0xf5(tempaddr) {		/* SET 6,L */
      L |= 0x40;
    };
    ops[0xf6] = function op_0xf6(tempaddr) {		/* SET 6,(HL) */
      tstates+=7;
      writebyte(HLR, readbyte(HLR) | 0x40);
    };
    ops[0xf7] = function op_0xf7(tempaddr) {		/* SET 6,A */
      A |= 0x40;
    };
    ops[0xf8] = function op_0xf8(tempaddr) {		/* SET 7,B */
      B |= 0x80;
    };
    ops[0xf9] = function op_0xf9(tempaddr) {		/* SET 7,C */
      C |= 0x80;
    };
    ops[0xfa] = function op_0xfa(tempaddr) {		/* SET 7,D */
      D |= 0x80;
    };
    ops[0xfb] = function op_0xfb(tempaddr) {		/* SET 7,E */
      E |= 0x80;
    };
    ops[0xfc] = function op_0xfc(tempaddr) {		/* SET 7,H */
      H |= 0x80;
    };
    ops[0xfd] = function op_0xfd(tempaddr) {		/* SET 7,L */
      L |= 0x80;
    };
    ops[0xfe] = function op_0xfe(tempaddr) {		/* SET 7,(HL) */
      tstates+=7;
      writebyte(HLR, readbyte(HLR) | 0x80);
    };
    ops[0xff] = function op_0xff(tempaddr) {		/* SET 7,A */
      A |= 0x80;
    };
    ops[256] = function() {};        /* All other opcodes are NOPD */
