/* opcodes_base.c: unshifted Z80 opcodes
   Copyright (c) 1999-2008 Philip Kendall, Matthew Westcott

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
    Contact details: <matthew@west.co.tt>
    Matthew Westcott, 14 Daisy Hill Drive, Adlington, Chorley, Lancs PR6 9NE UNITED KINGDOM

*/

/* NB: this file is autogenerated by 'z80.pl' from 'opcodes_base.dat',
   and included in 'z80_ops.jscpp' */

    ops[0x00] = function op_0x00(tempaddr) {		/* NOP */
    };
    ops[0x01] = function op_0x01(tempaddr) {		/* LD BC,nnnn */
      tstates+=6;
      C=readbyte(PC++);
      PC &= 0xffff;
      B=readbyte(PC++);
      PC &= 0xffff;
    };
    ops[0x02] = function op_0x02(tempaddr) {		/* LD (BC),A */
      tstates+=3;
      writebyte(BCR,A);
    };
    ops[0x03] = function op_0x03(tempaddr) {		/* INC BC */
      tstates += 2;
      var wordtemp = (BCR + 1) & 0xffff;
      B = wordtemp >> 8;
      C = wordtemp & 0xff;
    };
    ops[0x04] = function op_0x04(tempaddr) {		/* INC B */
      INC(B);
    };
    ops[0x05] = function op_0x05(tempaddr) {		/* DEC B */
      DEC(B);
    };
    ops[0x06] = function op_0x06(tempaddr) {		/* LD B,nn */
      tstates+=3;
      B=readbyte(PC++); PC &= 0xffff;
    };
    ops[0x07] = function op_0x07(tempaddr) {		/* RLCA */
      A = ( (A & 0x7f) << 1 ) | ( A >> 7 );
      F = ( F & ( FLAG_P | FLAG_Z | FLAG_S ) ) |
    ( A & ( FLAG_C | FLAG_3 | FLAG_5 ) );
    };
    ops[0x08] = function op_0x08(tempaddr) {		/* EX AF,AF' */
      {
          var olda = A; var oldf = F;
          A = A_; F = F_;
          A_ = olda; F_ = oldf;
      }
    };
    ops[0x09] = function op_0x09(tempaddr) {		/* ADD HL,BC */
      ADD16(HLR,BCR,H,L);
    };
    ops[0x0a] = function op_0x0a(tempaddr) {		/* LD A,(BC) */
      tstates+=3;
      A=readbyte(BCR);
    };
    ops[0x0b] = function op_0x0b(tempaddr) {		/* DEC BC */
      tstates += 2;
      var wordtemp = (BCR - 1) & 0xffff;
      B = wordtemp >> 8;
      C = wordtemp & 0xff;
    };
    ops[0x0c] = function op_0x0c(tempaddr) {		/* INC C */
      INC(C);
    };
    ops[0x0d] = function op_0x0d(tempaddr) {		/* DEC C */
      DEC(C);
    };
    ops[0x0e] = function op_0x0e(tempaddr) {		/* LD C,nn */
      tstates+=3;
      C=readbyte(PC++); PC &= 0xffff;
    };
    ops[0x0f] = function op_0x0f(tempaddr) {		/* RRCA */
      F = ( F & ( FLAG_P | FLAG_Z | FLAG_S ) ) | ( A & FLAG_C );
      A = ( A >> 1) | ( (A & 0x01) << 7 );
      F |= ( A & ( FLAG_3 | FLAG_5 ) );
    };
    ops[0x10] = function op_0x10(tempaddr) {		/* DJNZ offset */
      tstates+=4;
      B = (B-1) & 0xff;
      if(B) { JR(); }
      PC++;
      PC &= 0xffff;
    };
    ops[0x11] = function op_0x11(tempaddr) {		/* LD DE,nnnn */
      tstates+=6;
      E=readbyte(PC++);
      PC &= 0xffff;
      D=readbyte(PC++);
      PC &= 0xffff;
    };
    ops[0x12] = function op_0x12(tempaddr) {		/* LD (DE),A */
      tstates+=3;
      writebyte(DER,A);
    };
    ops[0x13] = function op_0x13(tempaddr) {		/* INC DE */
      tstates += 2;
      var wordtemp = (DER + 1) & 0xffff;
      D = wordtemp >> 8;
      E = wordtemp & 0xff;
    };
    ops[0x14] = function op_0x14(tempaddr) {		/* INC D */
      INC(D);
    };
    ops[0x15] = function op_0x15(tempaddr) {		/* DEC D */
      DEC(D);
    };
    ops[0x16] = function op_0x16(tempaddr) {		/* LD D,nn */
      tstates+=3;
      D=readbyte(PC++); PC &= 0xffff;
    };
    ops[0x17] = function op_0x17(tempaddr) {		/* RLA */
      {
    var bytetemp = A;
    A = ( (A & 0x7f) << 1 ) | ( F & FLAG_C );
    F = ( F & ( FLAG_P | FLAG_Z | FLAG_S ) ) |
      ( A & ( FLAG_3 | FLAG_5 ) ) | ( bytetemp >> 7 );
      }
    };
    ops[0x18] = function op_0x18(tempaddr) {		/* JR offset */
      tstates+=3;
      JR();
      PC++; PC &= 0xffff;
    };
    ops[0x19] = function op_0x19(tempaddr) {		/* ADD HL,DE */
      ADD16(HLR,DER,H,L);
    };
    ops[0x1a] = function op_0x1a(tempaddr) {		/* LD A,(DE) */
      tstates+=3;
      A=readbyte(DER);
    };
    ops[0x1b] = function op_0x1b(tempaddr) {		/* DEC DE */
      tstates += 2;
      var wordtemp = (DER - 1) & 0xffff;
      D = wordtemp >> 8;
      E = wordtemp & 0xff;
    };
    ops[0x1c] = function op_0x1c(tempaddr) {		/* INC E */
      INC(E);
    };
    ops[0x1d] = function op_0x1d(tempaddr) {		/* DEC E */
      DEC(E);
    };
    ops[0x1e] = function op_0x1e(tempaddr) {		/* LD E,nn */
      tstates+=3;
      E=readbyte(PC++); PC &= 0xffff;
    };
    ops[0x1f] = function op_0x1f(tempaddr) {		/* RRA */
      {
    var bytetemp = A;
    A = ( A >> 1 ) | ( (F & 0x01) << 7 );
    F = ( F & ( FLAG_P | FLAG_Z | FLAG_S ) ) |
      ( A & ( FLAG_3 | FLAG_5 ) ) | ( bytetemp & FLAG_C ) ;
      }
    };
    ops[0x20] = function op_0x20(tempaddr) {		/* JR NZ,offset */
      tstates+=3;
      if( ! ( F & FLAG_Z ) ) { JR(); }
      PC++; PC &= 0xffff;
    };
    ops[0x21] = function op_0x21(tempaddr) {		/* LD HL,nnnn */
      tstates+=6;
      L=readbyte(PC++);
      PC &= 0xffff;
      H=readbyte(PC++);
      PC &= 0xffff;
    };
    ops[0x22] = function op_0x22(tempaddr) {		/* LD (nnnn),HL */
      LD16_NNRR(L,H);
    };
    ops[0x23] = function op_0x23(tempaddr) {		/* INC HL */
      tstates += 2;
      var wordtemp = (HLR + 1) & 0xffff;
      H = wordtemp >> 8;
      L = wordtemp & 0xff;
    };
    ops[0x24] = function op_0x24(tempaddr) {		/* INC H */
      INC(H);
    };
    ops[0x25] = function op_0x25(tempaddr) {		/* DEC H */
      DEC(H);
    };
    ops[0x26] = function op_0x26(tempaddr) {		/* LD H,nn */
      tstates+=3;
      H=readbyte(PC++); PC &= 0xffff;
    };
    ops[0x27] = function op_0x27(tempaddr) {		/* DAA */
      {
    var add = 0, carry = ( F & FLAG_C );
    if( ( F & FLAG_H ) || ( (A & 0x0f)>9 ) ) add=6;
    if( carry || (A > 0x99 ) ) add|=0x60;
    if( A > 0x99 ) carry=FLAG_C;
    if ( F & FLAG_N ) {
      SUB(add);
    } else {
      ADD(add);
    }
    F = ( F & ~( FLAG_C | FLAG_P) ) | carry | parity_table[A];
      }
    };
    ops[0x28] = function op_0x28(tempaddr) {		/* JR Z,offset */
      tstates+=3;
      if( F & FLAG_Z ) { JR(); }
      PC++; PC &= 0xffff;
    };
    ops[0x29] = function op_0x29(tempaddr) {		/* ADD HL,HL */
      ADD16(HLR,HLR,H,L);
    };
    ops[0x2a] = function op_0x2a(tempaddr) {		/* LD HL,(nnnn) */
      LD16_RRNN(L,H);
    };
    ops[0x2b] = function op_0x2b(tempaddr) {		/* DEC HL */
      tstates += 2;
      var wordtemp = (HLR - 1) & 0xffff;
      H = wordtemp >> 8;
      L = wordtemp & 0xff;
    };
    ops[0x2c] = function op_0x2c(tempaddr) {		/* INC L */
      INC(L);
    };
    ops[0x2d] = function op_0x2d(tempaddr) {		/* DEC L */
      DEC(L);
    };
    ops[0x2e] = function op_0x2e(tempaddr) {		/* LD L,nn */
      tstates+=3;
      L=readbyte(PC++); PC &= 0xffff;
    };
    ops[0x2f] = function op_0x2f(tempaddr) {		/* CPL */
      A ^= 0xff;
      F = ( F & ( FLAG_C | FLAG_P | FLAG_Z | FLAG_S ) ) |
    ( A & ( FLAG_3 | FLAG_5 ) ) | ( FLAG_N | FLAG_H );
    };
    ops[0x30] = function op_0x30(tempaddr) {		/* JR NC,offset */
      tstates+=3;
      if( ! ( F & FLAG_C ) ) { JR(); }
      PC++; PC &= 0xffff;
    };
    ops[0x31] = function op_0x31(tempaddr) {		/* LD SP,nnnn */
      tstates+=6;
      var splow = readbyte(PC++);
      PC &= 0xffff;
      var sphigh=readbyte(PC++);
      SP = splow | (sphigh << 8);
      PC &= 0xffff;
    };
    ops[0x32] = function op_0x32(tempaddr) {		/* LD (nnnn),A */
      tstates+=3;
      {
    var wordtemp = readbyte( PC++ );
    PC &= 0xffff;
    tstates+=6;
    wordtemp|=readbyte(PC++) << 8;
    PC &= 0xffff;
    writebyte(wordtemp,A);
      }
    };
    ops[0x33] = function op_0x33(tempaddr) {		/* INC SP */
      tstates += 2;
      SP = (SP + 1) & 0xffff;
    };
    ops[0x34] = function op_0x34(tempaddr) {		/* INC (HL) */
      tstates+=7;
      {
    var bytetemp = readbyte( HLR );
    INC(bytetemp);
    writebyte(HLR,bytetemp);
      }
    };
    ops[0x35] = function op_0x35(tempaddr) {		/* DEC (HL) */
      tstates+=7;
      {
    var bytetemp = readbyte( HLR );
    DEC(bytetemp);
    writebyte(HLR,bytetemp);
      }
    };
    ops[0x36] = function op_0x36(tempaddr) {		/* LD (HL),nn */
      tstates+=6;
      writebyte(HLR,readbyte(PC++));
      PC &= 0xffff;
    };
    ops[0x37] = function op_0x37(tempaddr) {		/* SCF */
      F = ( F & ( FLAG_P | FLAG_Z | FLAG_S ) ) |
        ( A & ( FLAG_3 | FLAG_5          ) ) |
        FLAG_C;
    };
    ops[0x38] = function op_0x38(tempaddr) {		/* JR C,offset */
      tstates+=3;
      if( F & FLAG_C ) { JR(); }
      PC++; PC &= 0xffff;
    };
    ops[0x39] = function op_0x39(tempaddr) {		/* ADD HL,SP */
      ADD16(HLR,SPR,H,L);
    };
    ops[0x3a] = function op_0x3a(tempaddr) {		/* LD A,(nnnn) */
      {
    var wordtemp;
    tstates+=9;
    wordtemp = readbyte(PC++);
    PC &= 0xffff;
    wordtemp|= ( readbyte(PC++) << 8 );
    PC &= 0xffff;
    A=readbyte(wordtemp);
      }
    };
    ops[0x3b] = function op_0x3b(tempaddr) {		/* DEC SP */
      tstates += 2;
      SP = (SP - 1) & 0xffff;
    };
    ops[0x3c] = function op_0x3c(tempaddr) {		/* INC A */
      INC(A);
    };
    ops[0x3d] = function op_0x3d(tempaddr) {		/* DEC A */
      DEC(A);
    };
    ops[0x3e] = function op_0x3e(tempaddr) {		/* LD A,nn */
      tstates+=3;
      A=readbyte(PC++); PC &= 0xffff;
    };
    ops[0x3f] = function op_0x3f(tempaddr) {		/* CCF */
      F = ( F & ( FLAG_P | FLAG_Z | FLAG_S ) ) |
    ( ( F & FLAG_C ) ? FLAG_H : FLAG_C ) | ( A & ( FLAG_3 | FLAG_5 ) );
    };
    ops[0x40] = function op_0x40(tempaddr) {		/* LD B,B */
    };
    ops[0x41] = function op_0x41(tempaddr) {		/* LD B,C */
      B=C;
    };
    ops[0x42] = function op_0x42(tempaddr) {		/* LD B,D */
      B=D;
    };
    ops[0x43] = function op_0x43(tempaddr) {		/* LD B,E */
      B=E;
    };
    ops[0x44] = function op_0x44(tempaddr) {		/* LD B,H */
      B=H;
    };
    ops[0x45] = function op_0x45(tempaddr) {		/* LD B,L */
      B=L;
    };
    ops[0x46] = function op_0x46(tempaddr) {		/* LD B,(HL) */
      tstates+=3;
      B=readbyte(HLR);
    };
    ops[0x47] = function op_0x47(tempaddr) {		/* LD B,A */
      B=A;
    };
    ops[0x48] = function op_0x48(tempaddr) {		/* LD C,B */
      C=B;
    };
    ops[0x49] = function op_0x49(tempaddr) {		/* LD C,C */
    };
    ops[0x4a] = function op_0x4a(tempaddr) {		/* LD C,D */
      C=D;
    };
    ops[0x4b] = function op_0x4b(tempaddr) {		/* LD C,E */
      C=E;
    };
    ops[0x4c] = function op_0x4c(tempaddr) {		/* LD C,H */
      C=H;
    };
    ops[0x4d] = function op_0x4d(tempaddr) {		/* LD C,L */
      C=L;
    };
    ops[0x4e] = function op_0x4e(tempaddr) {		/* LD C,(HL) */
      tstates+=3;
      C=readbyte(HLR);
    };
    ops[0x4f] = function op_0x4f(tempaddr) {		/* LD C,A */
      C=A;
    };
    ops[0x50] = function op_0x50(tempaddr) {		/* LD D,B */
      D=B;
    };
    ops[0x51] = function op_0x51(tempaddr) {		/* LD D,C */
      D=C;
    };
    ops[0x52] = function op_0x52(tempaddr) {		/* LD D,D */
    };
    ops[0x53] = function op_0x53(tempaddr) {		/* LD D,E */
      D=E;
    };
    ops[0x54] = function op_0x54(tempaddr) {		/* LD D,H */
      D=H;
    };
    ops[0x55] = function op_0x55(tempaddr) {		/* LD D,L */
      D=L;
    };
    ops[0x56] = function op_0x56(tempaddr) {		/* LD D,(HL) */
      tstates+=3;
      D=readbyte(HLR);
    };
    ops[0x57] = function op_0x57(tempaddr) {		/* LD D,A */
      D=A;
    };
    ops[0x58] = function op_0x58(tempaddr) {		/* LD E,B */
      E=B;
    };
    ops[0x59] = function op_0x59(tempaddr) {		/* LD E,C */
      E=C;
    };
    ops[0x5a] = function op_0x5a(tempaddr) {		/* LD E,D */
      E=D;
    };
    ops[0x5b] = function op_0x5b(tempaddr) {		/* LD E,E */
    };
    ops[0x5c] = function op_0x5c(tempaddr) {		/* LD E,H */
      E=H;
    };
    ops[0x5d] = function op_0x5d(tempaddr) {		/* LD E,L */
      E=L;
    };
    ops[0x5e] = function op_0x5e(tempaddr) {		/* LD E,(HL) */
      tstates+=3;
      E=readbyte(HLR);
    };
    ops[0x5f] = function op_0x5f(tempaddr) {		/* LD E,A */
      E=A;
    };
    ops[0x60] = function op_0x60(tempaddr) {		/* LD H,B */
      H=B;
    };
    ops[0x61] = function op_0x61(tempaddr) {		/* LD H,C */
      H=C;
    };
    ops[0x62] = function op_0x62(tempaddr) {		/* LD H,D */
      H=D;
    };
    ops[0x63] = function op_0x63(tempaddr) {		/* LD H,E */
      H=E;
    };
    ops[0x64] = function op_0x64(tempaddr) {		/* LD H,H */
    };
    ops[0x65] = function op_0x65(tempaddr) {		/* LD H,L */
      H=L;
    };
    ops[0x66] = function op_0x66(tempaddr) {		/* LD H,(HL) */
      tstates+=3;
      H=readbyte(HLR);
    };
    ops[0x67] = function op_0x67(tempaddr) {		/* LD H,A */
      H=A;
    };
    ops[0x68] = function op_0x68(tempaddr) {		/* LD L,B */
      L=B;
    };
    ops[0x69] = function op_0x69(tempaddr) {		/* LD L,C */
      L=C;
    };
    ops[0x6a] = function op_0x6a(tempaddr) {		/* LD L,D */
      L=D;
    };
    ops[0x6b] = function op_0x6b(tempaddr) {		/* LD L,E */
      L=E;
    };
    ops[0x6c] = function op_0x6c(tempaddr) {		/* LD L,H */
      L=H;
    };
    ops[0x6d] = function op_0x6d(tempaddr) {		/* LD L,L */
    };
    ops[0x6e] = function op_0x6e(tempaddr) {		/* LD L,(HL) */
      tstates+=3;
      L=readbyte(HLR);
    };
    ops[0x6f] = function op_0x6f(tempaddr) {		/* LD L,A */
      L=A;
    };
    ops[0x70] = function op_0x70(tempaddr) {		/* LD (HL),B */
      tstates+=3;
      writebyte(HLR,B);
    };
    ops[0x71] = function op_0x71(tempaddr) {		/* LD (HL),C */
      tstates+=3;
      writebyte(HLR,C);
    };
    ops[0x72] = function op_0x72(tempaddr) {		/* LD (HL),D */
      tstates+=3;
      writebyte(HLR,D);
    };
    ops[0x73] = function op_0x73(tempaddr) {		/* LD (HL),E */
      tstates+=3;
      writebyte(HLR,E);
    };
    ops[0x74] = function op_0x74(tempaddr) {		/* LD (HL),H */
      tstates+=3;
      writebyte(HLR,H);
    };
    ops[0x75] = function op_0x75(tempaddr) {		/* LD (HL),L */
      tstates+=3;
      writebyte(HLR,L);
    };
    ops[0x76] = function op_0x76(tempaddr) {		/* HALT */
      z80.halted=1;
      PC--;PC &= 0xffff;
    };
    ops[0x77] = function op_0x77(tempaddr) {		/* LD (HL),A */
      tstates+=3;
      writebyte(HLR,A);
    };
    ops[0x78] = function op_0x78(tempaddr) {		/* LD A,B */
      A=B;
    };
    ops[0x79] = function op_0x79(tempaddr) {		/* LD A,C */
      A=C;
    };
    ops[0x7a] = function op_0x7a(tempaddr) {		/* LD A,D */
      A=D;
    };
    ops[0x7b] = function op_0x7b(tempaddr) {		/* LD A,E */
      A=E;
    };
    ops[0x7c] = function op_0x7c(tempaddr) {		/* LD A,H */
      A=H;
    };
    ops[0x7d] = function op_0x7d(tempaddr) {		/* LD A,L */
      A=L;
    };
    ops[0x7e] = function op_0x7e(tempaddr) {		/* LD A,(HL) */
      tstates+=3;
      A=readbyte(HLR);
    };
    ops[0x7f] = function op_0x7f(tempaddr) {		/* LD A,A */
    };
    ops[0x80] = function op_0x80(tempaddr) {		/* ADD A,B */
      ADD(B);
    };
    ops[0x81] = function op_0x81(tempaddr) {		/* ADD A,C */
      ADD(C);
    };
    ops[0x82] = function op_0x82(tempaddr) {		/* ADD A,D */
      ADD(D);
    };
    ops[0x83] = function op_0x83(tempaddr) {		/* ADD A,E */
      ADD(E);
    };
    ops[0x84] = function op_0x84(tempaddr) {		/* ADD A,H */
      ADD(H);
    };
    ops[0x85] = function op_0x85(tempaddr) {		/* ADD A,L */
      ADD(L);
    };
    ops[0x86] = function op_0x86(tempaddr) {		/* ADD A,(HL) */
      tstates+=3;
      {
    var bytetemp = readbyte( HLR );
    ADD(bytetemp);
      }
    };
    ops[0x87] = function op_0x87(tempaddr) {		/* ADD A,A */
      ADD(A);
    };
    ops[0x88] = function op_0x88(tempaddr) {		/* ADC A,B */
      ADC(B);
    };
    ops[0x89] = function op_0x89(tempaddr) {		/* ADC A,C */
      ADC(C);
    };
    ops[0x8a] = function op_0x8a(tempaddr) {		/* ADC A,D */
      ADC(D);
    };
    ops[0x8b] = function op_0x8b(tempaddr) {		/* ADC A,E */
      ADC(E);
    };
    ops[0x8c] = function op_0x8c(tempaddr) {		/* ADC A,H */
      ADC(H);
    };
    ops[0x8d] = function op_0x8d(tempaddr) {		/* ADC A,L */
      ADC(L);
    };
    ops[0x8e] = function op_0x8e(tempaddr) {		/* ADC A,(HL) */
      tstates+=3;
      {
    var bytetemp = readbyte( HLR );
    ADC(bytetemp);
      }
    };
    ops[0x8f] = function op_0x8f(tempaddr) {		/* ADC A,A */
      ADC(A);
    };
    ops[0x90] = function op_0x90(tempaddr) {		/* SUB A,B */
      SUB(B);
    };
    ops[0x91] = function op_0x91(tempaddr) {		/* SUB A,C */
      SUB(C);
    };
    ops[0x92] = function op_0x92(tempaddr) {		/* SUB A,D */
      SUB(D);
    };
    ops[0x93] = function op_0x93(tempaddr) {		/* SUB A,E */
      SUB(E);
    };
    ops[0x94] = function op_0x94(tempaddr) {		/* SUB A,H */
      SUB(H);
    };
    ops[0x95] = function op_0x95(tempaddr) {		/* SUB A,L */
      SUB(L);
    };
    ops[0x96] = function op_0x96(tempaddr) {		/* SUB A,(HL) */
      tstates+=3;
      {
    var bytetemp = readbyte( HLR );
    SUB(bytetemp);
      }
    };
    ops[0x97] = function op_0x97(tempaddr) {		/* SUB A,A */
      SUB(A);
    };
    ops[0x98] = function op_0x98(tempaddr) {		/* SBC A,B */
      SBC(B);
    };
    ops[0x99] = function op_0x99(tempaddr) {		/* SBC A,C */
      SBC(C);
    };
    ops[0x9a] = function op_0x9a(tempaddr) {		/* SBC A,D */
      SBC(D);
    };
    ops[0x9b] = function op_0x9b(tempaddr) {		/* SBC A,E */
      SBC(E);
    };
    ops[0x9c] = function op_0x9c(tempaddr) {		/* SBC A,H */
      SBC(H);
    };
    ops[0x9d] = function op_0x9d(tempaddr) {		/* SBC A,L */
      SBC(L);
    };
    ops[0x9e] = function op_0x9e(tempaddr) {		/* SBC A,(HL) */
      tstates+=3;
      {
    var bytetemp = readbyte( HLR );
    SBC(bytetemp);
      }
    };
    ops[0x9f] = function op_0x9f(tempaddr) {		/* SBC A,A */
      SBC(A);
    };
    ops[0xa0] = function op_0xa0(tempaddr) {		/* AND A,B */
      AND(B);
    };
    ops[0xa1] = function op_0xa1(tempaddr) {		/* AND A,C */
      AND(C);
    };
    ops[0xa2] = function op_0xa2(tempaddr) {		/* AND A,D */
      AND(D);
    };
    ops[0xa3] = function op_0xa3(tempaddr) {		/* AND A,E */
      AND(E);
    };
    ops[0xa4] = function op_0xa4(tempaddr) {		/* AND A,H */
      AND(H);
    };
    ops[0xa5] = function op_0xa5(tempaddr) {		/* AND A,L */
      AND(L);
    };
    ops[0xa6] = function op_0xa6(tempaddr) {		/* AND A,(HL) */
      tstates+=3;
      {
    var bytetemp = readbyte( HLR );
    AND(bytetemp);
      }
    };
    ops[0xa7] = function op_0xa7(tempaddr) {		/* AND A,A */
      AND(A);
    };
    ops[0xa8] = function op_0xa8(tempaddr) {		/* XOR A,B */
      XOR(B);
    };
    ops[0xa9] = function op_0xa9(tempaddr) {		/* XOR A,C */
      XOR(C);
    };
    ops[0xaa] = function op_0xaa(tempaddr) {		/* XOR A,D */
      XOR(D);
    };
    ops[0xab] = function op_0xab(tempaddr) {		/* XOR A,E */
      XOR(E);
    };
    ops[0xac] = function op_0xac(tempaddr) {		/* XOR A,H */
      XOR(H);
    };
    ops[0xad] = function op_0xad(tempaddr) {		/* XOR A,L */
      XOR(L);
    };
    ops[0xae] = function op_0xae(tempaddr) {		/* XOR A,(HL) */
      tstates+=3;
      {
    var bytetemp = readbyte( HLR );
    XOR(bytetemp);
      }
    };
    ops[0xaf] = function op_0xaf(tempaddr) {		/* XOR A,A */
      XOR(A);
    };
    ops[0xb0] = function op_0xb0(tempaddr) {		/* OR A,B */
      OR(B);
    };
    ops[0xb1] = function op_0xb1(tempaddr) {		/* OR A,C */
      OR(C);
    };
    ops[0xb2] = function op_0xb2(tempaddr) {		/* OR A,D */
      OR(D);
    };
    ops[0xb3] = function op_0xb3(tempaddr) {		/* OR A,E */
      OR(E);
    };
    ops[0xb4] = function op_0xb4(tempaddr) {		/* OR A,H */
      OR(H);
    };
    ops[0xb5] = function op_0xb5(tempaddr) {		/* OR A,L */
      OR(L);
    };
    ops[0xb6] = function op_0xb6(tempaddr) {		/* OR A,(HL) */
      tstates+=3;
      {
    var bytetemp = readbyte( HLR );
    OR(bytetemp);
      }
    };
    ops[0xb7] = function op_0xb7(tempaddr) {		/* OR A,A */
      OR(A);
    };
    ops[0xb8] = function op_0xb8(tempaddr) {		/* CP B */
      CP(B);
    };
    ops[0xb9] = function op_0xb9(tempaddr) {		/* CP C */
      CP(C);
    };
    ops[0xba] = function op_0xba(tempaddr) {		/* CP D */
      CP(D);
    };
    ops[0xbb] = function op_0xbb(tempaddr) {		/* CP E */
      CP(E);
    };
    ops[0xbc] = function op_0xbc(tempaddr) {		/* CP H */
      CP(H);
    };
    ops[0xbd] = function op_0xbd(tempaddr) {		/* CP L */
      CP(L);
    };
    ops[0xbe] = function op_0xbe(tempaddr) {		/* CP (HL) */
      tstates+=3;
      {
    var bytetemp = readbyte( HLR );
    CP(bytetemp);
      }
    };
    ops[0xbf] = function op_0xbf(tempaddr) {		/* CP A */
      CP(A);
    };
    ops[0xc0] = function op_0xc0(tempaddr) {		/* RET NZ */
      tstates++;
      if( ! ( F & FLAG_Z ) ) { RET(); }
    };
    ops[0xc1] = function op_0xc1(tempaddr) {		/* POP BC */
      POP16(C,B);
    };
    ops[0xc2] = function op_0xc2(tempaddr) {		/* JP NZ,nnnn */
      tstates+=6;
      if( ! ( F & FLAG_Z ) ) { JP(); }
      else PC+=2;
    };
    ops[0xc3] = function op_0xc3(tempaddr) {		/* JP nnnn */
      tstates+=6;
      JP();
    };
    ops[0xc4] = function op_0xc4(tempaddr) {		/* CALL NZ,nnnn */
      tstates+=6;
      if( ! ( F & FLAG_Z ) ) { CALL(); }
      else PC+=2;
    };
    ops[0xc5] = function op_0xc5(tempaddr) {		/* PUSH BC */
      tstates++;
      PUSH16(C,B);
    };
    ops[0xc6] = function op_0xc6(tempaddr) {		/* ADD A,nn */
      tstates+=3;
      {
    var bytetemp = readbyte( PCR++ );
    ADD(bytetemp);
      }
    };
    ops[0xc7] = function op_0xc7(tempaddr) {		/* RST 00 */
      tstates++;
      RST(0x00);
    };
    ops[0xc8] = function op_0xc8(tempaddr) {		/* RET Z */
      tstates++;
      if( F & FLAG_Z ) { RET(); }
    };
    ops[0xc9] = function op_0xc9(tempaddr) {		/* RET */
      RET();
    };
    ops[0xca] = function op_0xca(tempaddr) {		/* JP Z,nnnn */
      tstates+=6;
      if( F & FLAG_Z ) { JP(); }
      else PC+=2;
    };
    ops[0xcb] = function op_0xcb(tempaddr) {		/* shift CB */
      {
    var opcode2;
    tstates+=4;
    opcode2 = readbyte_internal( PC++ );
    PC &= 0xffff;
    R = (R+1) & 0x7f;
    z80_cbxx(opcode2);
      }
    };
    ops[0xcc] = function op_0xcc(tempaddr) {		/* CALL Z,nnnn */
      tstates+=6;
      if( F & FLAG_Z ) { CALL(); }
      else PC+=2;
    };
    ops[0xcd] = function op_0xcd(tempaddr) {		/* CALL nnnn */
      tstates+=6;
      CALL();
    };
    ops[0xce] = function op_0xce(tempaddr) {		/* ADC A,nn */
      tstates+=3;
      {
    var bytetemp = readbyte( PCR++ );
    ADC(bytetemp);
      }
    };
    ops[0xcf] = function op_0xcf(tempaddr) {		/* RST 8 */
      tstates++;
      RST(0x08);
    };
    ops[0xd0] = function op_0xd0(tempaddr) {		/* RET NC */
      tstates++;
      if( ! ( F & FLAG_C ) ) { RET(); }
    };
    ops[0xd1] = function op_0xd1(tempaddr) {		/* POP DE */
      POP16(E,D);
    };
    ops[0xd2] = function op_0xd2(tempaddr) {		/* JP NC,nnnn */
      tstates+=6;
      if( ! ( F & FLAG_C ) ) { JP(); }
      else PC+=2;
    };
    ops[0xd3] = function op_0xd3(tempaddr) {		/* OUT (nn),A */
      { 
    var outtemp;
    tstates+=4;
    outtemp = readbyte( PC++ ) + ( A << 8 );
    PC &= 0xffff;
    OUT( outtemp , A );
      }
    };
    ops[0xd4] = function op_0xd4(tempaddr) {		/* CALL NC,nnnn */
      tstates+=6;
      if( ! ( F & FLAG_C ) ) { CALL(); }
      else PC+=2;
    };
    ops[0xd5] = function op_0xd5(tempaddr) {		/* PUSH DE */
      tstates++;
      PUSH16(E,D);
    };
    ops[0xd6] = function op_0xd6(tempaddr) {		/* SUB nn */
      tstates+=3;
      {
    var bytetemp = readbyte( PCR++ );
    SUB(bytetemp);
      }
    };
    ops[0xd7] = function op_0xd7(tempaddr) {		/* RST 10 */
      tstates++;
      RST(0x10);
    };
    ops[0xd8] = function op_0xd8(tempaddr) {		/* RET C */
      tstates++;
      if( F & FLAG_C ) { RET(); }
    };
    ops[0xd9] = function op_0xd9(tempaddr) {		/* EXX */
      {
    var bytetemp;
    bytetemp = B; B = B_; B_ = bytetemp;
    bytetemp = C; C = C_; C_ = bytetemp;
    bytetemp = D; D = D_; D_ = bytetemp;
    bytetemp = E; E = E_; E_ = bytetemp;
    bytetemp = H; H = H_; H_ = bytetemp;
    bytetemp = L; L = L_; L_ = bytetemp;
      }
    };
    ops[0xda] = function op_0xda(tempaddr) {		/* JP C,nnnn */
      tstates+=6;
      if( F & FLAG_C ) { JP(); }
      else PC+=2;
    };
    ops[0xdb] = function op_0xdb(tempaddr) {		/* IN A,(nn) */
      { 
    var intemp;
    tstates+=4;
    intemp = readbyte( PC++ ) + ( A << 8 );
    PC &= 0xffff;
    contend_io( intemp, 3 );
        A=readport( intemp );
      }
    };
    ops[0xdc] = function op_0xdc(tempaddr) {		/* CALL C,nnnn */
      tstates+=6;
      if( F & FLAG_C ) { CALL(); }
      else PC+=2;
    };
    ops[0xdd] = function op_0xdd(tempaddr) {		/* shift DD */
      {
    var opcode2;
    tstates+=4;
    opcode2 = readbyte_internal( PC++ );
    PC &= 0xffff;
    R = (R+1) & 0x7f;
    z80_ddxx(opcode2);
      }
    };
    ops[0xde] = function op_0xde(tempaddr) {		/* SBC A,nn */
      tstates+=3;
      {
    var bytetemp = readbyte( PCR++ );
    SBC(bytetemp);
      }
    };
    ops[0xdf] = function op_0xdf(tempaddr) {		/* RST 18 */
      tstates++;
      RST(0x18);
    };
    ops[0xe0] = function op_0xe0(tempaddr) {		/* RET PO */
      tstates++;
      if( ! ( F & FLAG_P ) ) { RET(); }
    };
    ops[0xe1] = function op_0xe1(tempaddr) {		/* POP HL */
      POP16(L,H);
    };
    ops[0xe2] = function op_0xe2(tempaddr) {		/* JP PO,nnnn */
      tstates+=6;
      if( ! ( F & FLAG_P ) ) { JP(); }
      else PC+=2;
    };
    ops[0xe3] = function op_0xe3(tempaddr) {		/* EX (SP),HL */
      {
    var bytetempl = readbyte( SP     ),
                     bytetemph = readbyte( SP + 1 );
    tstates+=15;
    writebyte(SP+1,H); writebyte(SP,L);
    L=bytetempl; H=bytetemph;
      }
    };
    ops[0xe4] = function op_0xe4(tempaddr) {		/* CALL PO,nnnn */
      tstates+=6;
      if( ! ( F & FLAG_P ) ) { CALL(); }
      else PC+=2;
    };
    ops[0xe5] = function op_0xe5(tempaddr) {		/* PUSH HL */
      tstates++;
      PUSH16(L,H);
    };
    ops[0xe6] = function op_0xe6(tempaddr) {		/* AND nn */
      tstates+=3;
      {
    var bytetemp = readbyte( PCR++ );
    AND(bytetemp);
      }
    };
    ops[0xe7] = function op_0xe7(tempaddr) {		/* RST 20 */
      tstates++;
      RST(0x20);
    };
    ops[0xe8] = function op_0xe8(tempaddr) {		/* RET PE */
      tstates++;
      if( F & FLAG_P ) { RET(); }
    };
    ops[0xe9] = function op_0xe9(tempaddr) {		/* JP HL */
      PC=HLR;		/* NB: NOT INDIRECT! */
    };
    ops[0xea] = function op_0xea(tempaddr) {		/* JP PE,nnnn */
      tstates+=6;
      if( F & FLAG_P ) { JP(); }
      else PC+=2;
    };
    ops[0xeb] = function op_0xeb(tempaddr) {		/* EX DE,HL */
      {
    var bytetemp;
    bytetemp = D; D = H; H = bytetemp;
    bytetemp = E; E = L; L = bytetemp;
      }
    };
    ops[0xec] = function op_0xec(tempaddr) {		/* CALL PE,nnnn */
      tstates+=6;
      if( F & FLAG_P ) { CALL(); }
      else PC+=2;
    };
    ops[0xed] = function op_0xed(tempaddr) {		/* shift ED */
      {
    var opcode2;
    tstates+=4;
    opcode2 = readbyte_internal( PC++ );
    PC &= 0xffff;
    R = (R+1) & 0x7f;
    z80_edxx(opcode2);
      }
    };
    ops[0xee] = function op_0xee(tempaddr) {		/* XOR A,nn */
      tstates+=3;
      {
    var bytetemp = readbyte( PCR++ );
    XOR(bytetemp);
      }
    };
    ops[0xef] = function op_0xef(tempaddr) {		/* RST 28 */
      tstates++;
      RST(0x28);
    };
    ops[0xf0] = function op_0xf0(tempaddr) {		/* RET P */
      tstates++;
      if( ! ( F & FLAG_S ) ) { RET(); }
    };
    ops[0xf1] = function op_0xf1(tempaddr) {		/* POP AF */
      POP16(F,A);
    };
    ops[0xf2] = function op_0xf2(tempaddr) {		/* JP P,nnnn */
      tstates+=6;
      if( ! ( F & FLAG_S ) ) { JP(); }
      else PC+=2;
    };
    ops[0xf3] = function op_0xf3(tempaddr) {		/* DI */
      IFF1=IFF2=0;
    };
    ops[0xf4] = function op_0xf4(tempaddr) {		/* CALL P,nnnn */
      tstates+=6;
      if( ! ( F & FLAG_S ) ) { CALL(); }
      else PC+=2;
    };
    ops[0xf5] = function op_0xf5(tempaddr) {		/* PUSH AF */
      tstates++;
      PUSH16(F,A);
    };
    ops[0xf6] = function op_0xf6(tempaddr) {		/* OR nn */
      tstates+=3;
      {
    var bytetemp = readbyte( PCR++ );
    OR(bytetemp);
      }
    };
    ops[0xf7] = function op_0xf7(tempaddr) {		/* RST 30 */
      tstates++;
      RST(0x30);
    };
    ops[0xf8] = function op_0xf8(tempaddr) {		/* RET M */
      tstates++;
      if( F & FLAG_S ) { RET(); }
    };
    ops[0xf9] = function op_0xf9(tempaddr) {		/* LD SP,HL */
      tstates += 2;
      SP=HLR;
    };
    ops[0xfa] = function op_0xfa(tempaddr) {		/* JP M,nnnn */
      tstates+=6;
      if( F & FLAG_S ) { JP(); }
      else PC+=2;
    };
    ops[0xfb] = function op_0xfb(tempaddr) {		/* EI */
      IFF1=IFF2=1;
    };
    ops[0xfc] = function op_0xfc(tempaddr) {		/* CALL M,nnnn */
      tstates+=6;
      if( F & FLAG_S ) { CALL(); }
      else PC+=2;
    };
    ops[0xfd] = function op_0xfd(tempaddr) {		/* shift FD */
      {
    var opcode2;
    tstates+=4;
    opcode2 = readbyte_internal( PC++ );
    PC &= 0xffff;
    R = (R+1) & 0x7f;
    z80_fdxx(opcode2);
      }
    };
    ops[0xfe] = function op_0xfe(tempaddr) {		/* CP nn */
      tstates+=3;
      {
    var bytetemp = readbyte( PCR++ );
    CP(bytetemp);
      }
    };
    ops[0xff] = function op_0xff(tempaddr) {		/* RST 38 */
      tstates++;
      RST(0x38);
    };
    ops[256] = function() {};        /* All other opcodes are NOPD */
