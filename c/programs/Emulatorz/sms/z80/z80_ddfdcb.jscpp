/* opcodes_ddfdcb.c Z80 {DD,FD}CBxx opcodes
   Copyright (c) 1999-2008 Philip Kendall, Matthew Westcott

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
    Contact details: <matthew@west.co.tt>
    Matthew Westcott, 14 Daisy Hill Drive, Adlington, Chorley, Lancs PR6 9NE UNITED KINGDOM

*/

/* NB: this file is autogenerated by 'z80.pl' from 'opcodes_ddfdcb.dat',
   and included in 'z80_ops.jscpp' */

    ops[0x00] = function op_0x00(tempaddr) {		/* LD B,RLC (REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr);
      RLC(B);
      writebyte(tempaddr, B);
      };
    ops[0x01] = function op_0x01(tempaddr) {		/* LD C,RLC (REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr);
      RLC(C);
      writebyte(tempaddr, C);
      };
    ops[0x02] = function op_0x02(tempaddr) {		/* LD D,RLC (REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr);
      RLC(D);
      writebyte(tempaddr, D);
      };
    ops[0x03] = function op_0x03(tempaddr) {		/* LD E,RLC (REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr);
      RLC(E);
      writebyte(tempaddr, E);
      };
    ops[0x04] = function op_0x04(tempaddr) {		/* LD H,RLC (REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr);
      RLC(H);
      writebyte(tempaddr, H);
      };
    ops[0x05] = function op_0x05(tempaddr) {		/* LD L,RLC (REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr);
      RLC(L);
      writebyte(tempaddr, L);
      };
    ops[0x06] = function op_0x06(tempaddr) {		/* RLC (REGISTER+dd) */
      tstates += 8;
      {
    var bytetemp = readbyte(tempaddr);
    RLC(bytetemp);
    writebyte(tempaddr,bytetemp);
      }
    };
    ops[0x07] = function op_0x07(tempaddr) {		/* LD A,RLC (REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr);
      RLC(A);
      writebyte(tempaddr, A);
      };
    ops[0x08] = function op_0x08(tempaddr) {		/* LD B,RRC (REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr);
      RRC(B);
      writebyte(tempaddr, B);
      };
    ops[0x09] = function op_0x09(tempaddr) {		/* LD C,RRC (REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr);
      RRC(C);
      writebyte(tempaddr, C);
      };
    ops[0x0a] = function op_0x0a(tempaddr) {		/* LD D,RRC (REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr);
      RRC(D);
      writebyte(tempaddr, D);
      };
    ops[0x0b] = function op_0x0b(tempaddr) {		/* LD E,RRC (REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr);
      RRC(E);
      writebyte(tempaddr, E);
      };
    ops[0x0c] = function op_0x0c(tempaddr) {		/* LD H,RRC (REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr);
      RRC(H);
      writebyte(tempaddr, H);
      };
    ops[0x0d] = function op_0x0d(tempaddr) {		/* LD L,RRC (REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr);
      RRC(L);
      writebyte(tempaddr, L);
      };
    ops[0x0e] = function op_0x0e(tempaddr) {		/* RRC (REGISTER+dd) */
      tstates += 8;
      {
    var bytetemp = readbyte(tempaddr);
    RRC(bytetemp);
    writebyte(tempaddr,bytetemp);
      }
    };
    ops[0x0f] = function op_0x0f(tempaddr) {		/* LD A,RRC (REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr);
      RRC(A);
      writebyte(tempaddr, A);
      };
    ops[0x10] = function op_0x10(tempaddr) {		/* LD B,RL (REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr);
      RL(B);
      writebyte(tempaddr, B);
      };
    ops[0x11] = function op_0x11(tempaddr) {		/* LD C,RL (REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr);
      RL(C);
      writebyte(tempaddr, C);
      };
    ops[0x12] = function op_0x12(tempaddr) {		/* LD D,RL (REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr);
      RL(D);
      writebyte(tempaddr, D);
      };
    ops[0x13] = function op_0x13(tempaddr) {		/* LD E,RL (REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr);
      RL(E);
      writebyte(tempaddr, E);
      };
    ops[0x14] = function op_0x14(tempaddr) {		/* LD H,RL (REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr);
      RL(H);
      writebyte(tempaddr, H);
      };
    ops[0x15] = function op_0x15(tempaddr) {		/* LD L,RL (REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr);
      RL(L);
      writebyte(tempaddr, L);
      };
    ops[0x16] = function op_0x16(tempaddr) {		/* RL (REGISTER+dd) */
      tstates += 8;
      {
    var bytetemp = readbyte(tempaddr);
    RL(bytetemp);
    writebyte(tempaddr,bytetemp);
      }
    };
    ops[0x17] = function op_0x17(tempaddr) {		/* LD A,RL (REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr);
      RL(A);
      writebyte(tempaddr, A);
      };
    ops[0x18] = function op_0x18(tempaddr) {		/* LD B,RR (REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr);
      RR(B);
      writebyte(tempaddr, B);
      };
    ops[0x19] = function op_0x19(tempaddr) {		/* LD C,RR (REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr);
      RR(C);
      writebyte(tempaddr, C);
      };
    ops[0x1a] = function op_0x1a(tempaddr) {		/* LD D,RR (REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr);
      RR(D);
      writebyte(tempaddr, D);
      };
    ops[0x1b] = function op_0x1b(tempaddr) {		/* LD E,RR (REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr);
      RR(E);
      writebyte(tempaddr, E);
      };
    ops[0x1c] = function op_0x1c(tempaddr) {		/* LD H,RR (REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr);
      RR(H);
      writebyte(tempaddr, H);
      };
    ops[0x1d] = function op_0x1d(tempaddr) {		/* LD L,RR (REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr);
      RR(L);
      writebyte(tempaddr, L);
      };
    ops[0x1e] = function op_0x1e(tempaddr) {		/* RR (REGISTER+dd) */
      tstates += 8;
      {
    var bytetemp = readbyte(tempaddr);
    RR(bytetemp);
    writebyte(tempaddr,bytetemp);
      }
    };
    ops[0x1f] = function op_0x1f(tempaddr) {		/* LD A,RR (REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr);
      RR(A);
      writebyte(tempaddr, A);
      };
    ops[0x20] = function op_0x20(tempaddr) {		/* LD B,SLA (REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr);
      SLA(B);
      writebyte(tempaddr, B);
      };
    ops[0x21] = function op_0x21(tempaddr) {		/* LD C,SLA (REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr);
      SLA(C);
      writebyte(tempaddr, C);
      };
    ops[0x22] = function op_0x22(tempaddr) {		/* LD D,SLA (REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr);
      SLA(D);
      writebyte(tempaddr, D);
      };
    ops[0x23] = function op_0x23(tempaddr) {		/* LD E,SLA (REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr);
      SLA(E);
      writebyte(tempaddr, E);
      };
    ops[0x24] = function op_0x24(tempaddr) {		/* LD H,SLA (REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr);
      SLA(H);
      writebyte(tempaddr, H);
      };
    ops[0x25] = function op_0x25(tempaddr) {		/* LD L,SLA (REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr);
      SLA(L);
      writebyte(tempaddr, L);
      };
    ops[0x26] = function op_0x26(tempaddr) {		/* SLA (REGISTER+dd) */
      tstates += 8;
      {
    var bytetemp = readbyte(tempaddr);
    SLA(bytetemp);
    writebyte(tempaddr,bytetemp);
      }
    };
    ops[0x27] = function op_0x27(tempaddr) {		/* LD A,SLA (REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr);
      SLA(A);
      writebyte(tempaddr, A);
      };
    ops[0x28] = function op_0x28(tempaddr) {		/* LD B,SRA (REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr);
      SRA(B);
      writebyte(tempaddr, B);
      };
    ops[0x29] = function op_0x29(tempaddr) {		/* LD C,SRA (REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr);
      SRA(C);
      writebyte(tempaddr, C);
      };
    ops[0x2a] = function op_0x2a(tempaddr) {		/* LD D,SRA (REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr);
      SRA(D);
      writebyte(tempaddr, D);
      };
    ops[0x2b] = function op_0x2b(tempaddr) {		/* LD E,SRA (REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr);
      SRA(E);
      writebyte(tempaddr, E);
      };
    ops[0x2c] = function op_0x2c(tempaddr) {		/* LD H,SRA (REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr);
      SRA(H);
      writebyte(tempaddr, H);
      };
    ops[0x2d] = function op_0x2d(tempaddr) {		/* LD L,SRA (REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr);
      SRA(L);
      writebyte(tempaddr, L);
      };
    ops[0x2e] = function op_0x2e(tempaddr) {		/* SRA (REGISTER+dd) */
      tstates += 8;
      {
    var bytetemp = readbyte(tempaddr);
    SRA(bytetemp);
    writebyte(tempaddr,bytetemp);
      }
    };
    ops[0x2f] = function op_0x2f(tempaddr) {		/* LD A,SRA (REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr);
      SRA(A);
      writebyte(tempaddr, A);
      };
    ops[0x30] = function op_0x30(tempaddr) {		/* LD B,SLL (REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr);
      SLL(B);
      writebyte(tempaddr, B);
      };
    ops[0x31] = function op_0x31(tempaddr) {		/* LD C,SLL (REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr);
      SLL(C);
      writebyte(tempaddr, C);
      };
    ops[0x32] = function op_0x32(tempaddr) {		/* LD D,SLL (REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr);
      SLL(D);
      writebyte(tempaddr, D);
      };
    ops[0x33] = function op_0x33(tempaddr) {		/* LD E,SLL (REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr);
      SLL(E);
      writebyte(tempaddr, E);
      };
    ops[0x34] = function op_0x34(tempaddr) {		/* LD H,SLL (REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr);
      SLL(H);
      writebyte(tempaddr, H);
      };
    ops[0x35] = function op_0x35(tempaddr) {		/* LD L,SLL (REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr);
      SLL(L);
      writebyte(tempaddr, L);
      };
    ops[0x36] = function op_0x36(tempaddr) {		/* SLL (REGISTER+dd) */
      tstates += 8;
      {
    var bytetemp = readbyte(tempaddr);
    SLL(bytetemp);
    writebyte(tempaddr,bytetemp);
      }
    };
    ops[0x37] = function op_0x37(tempaddr) {		/* LD A,SLL (REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr);
      SLL(A);
      writebyte(tempaddr, A);
      };
    ops[0x38] = function op_0x38(tempaddr) {		/* LD B,SRL (REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr);
      SRL(B);
      writebyte(tempaddr, B);
      };
    ops[0x39] = function op_0x39(tempaddr) {		/* LD C,SRL (REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr);
      SRL(C);
      writebyte(tempaddr, C);
      };
    ops[0x3a] = function op_0x3a(tempaddr) {		/* LD D,SRL (REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr);
      SRL(D);
      writebyte(tempaddr, D);
      };
    ops[0x3b] = function op_0x3b(tempaddr) {		/* LD E,SRL (REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr);
      SRL(E);
      writebyte(tempaddr, E);
      };
    ops[0x3c] = function op_0x3c(tempaddr) {		/* LD H,SRL (REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr);
      SRL(H);
      writebyte(tempaddr, H);
      };
    ops[0x3d] = function op_0x3d(tempaddr) {		/* LD L,SRL (REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr);
      SRL(L);
      writebyte(tempaddr, L);
      };
    ops[0x3e] = function op_0x3e(tempaddr) {		/* SRL (REGISTER+dd) */
      tstates += 8;
      {
    var bytetemp = readbyte(tempaddr);
    SRL(bytetemp);
    writebyte(tempaddr,bytetemp);
      }
    };
    ops[0x3f] = function op_0x3f(tempaddr) {		/* LD A,SRL (REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr);
      SRL(A);
      writebyte(tempaddr, A);
      };
    ops[0x40] = 
    ops[0x41] = 
    ops[0x42] = 
    ops[0x43] = 
    ops[0x44] = 
    ops[0x45] = 
    ops[0x46] = 
    ops[0x47] = function op_0x47(tempaddr) {		/* BIT 0,(REGISTER+dd) */
      tstates += 5;
      {
    var bytetemp = readbyte( tempaddr );
    BIT_I( 0, bytetemp, tempaddr );
      }
    };
    ops[0x48] = 
    ops[0x49] = 
    ops[0x4a] = 
    ops[0x4b] = 
    ops[0x4c] = 
    ops[0x4d] = 
    ops[0x4e] = 
    ops[0x4f] = function op_0x4f(tempaddr) {		/* BIT 1,(REGISTER+dd) */
      tstates += 5;
      {
    var bytetemp = readbyte( tempaddr );
    BIT_I( 1, bytetemp, tempaddr );
      }
    };
    ops[0x50] = 
    ops[0x51] = 
    ops[0x52] = 
    ops[0x53] = 
    ops[0x54] = 
    ops[0x55] = 
    ops[0x56] = 
    ops[0x57] = function op_0x57(tempaddr) {		/* BIT 2,(REGISTER+dd) */
      tstates += 5;
      {
    var bytetemp = readbyte( tempaddr );
    BIT_I( 2, bytetemp, tempaddr );
      }
    };
    ops[0x58] = 
    ops[0x59] = 
    ops[0x5a] = 
    ops[0x5b] = 
    ops[0x5c] = 
    ops[0x5d] = 
    ops[0x5e] = 
    ops[0x5f] = function op_0x5f(tempaddr) {		/* BIT 3,(REGISTER+dd) */
      tstates += 5;
      {
    var bytetemp = readbyte( tempaddr );
    BIT_I( 3, bytetemp, tempaddr );
      }
    };
    ops[0x60] = 
    ops[0x61] = 
    ops[0x62] = 
    ops[0x63] = 
    ops[0x64] = 
    ops[0x65] = 
    ops[0x66] = 
    ops[0x67] = function op_0x67(tempaddr) {		/* BIT 4,(REGISTER+dd) */
      tstates += 5;
      {
    var bytetemp = readbyte( tempaddr );
    BIT_I( 4, bytetemp, tempaddr );
      }
    };
    ops[0x68] = 
    ops[0x69] = 
    ops[0x6a] = 
    ops[0x6b] = 
    ops[0x6c] = 
    ops[0x6d] = 
    ops[0x6e] = 
    ops[0x6f] = function op_0x6f(tempaddr) {		/* BIT 5,(REGISTER+dd) */
      tstates += 5;
      {
    var bytetemp = readbyte( tempaddr );
    BIT_I( 5, bytetemp, tempaddr );
      }
    };
    ops[0x70] = 
    ops[0x71] = 
    ops[0x72] = 
    ops[0x73] = 
    ops[0x74] = 
    ops[0x75] = 
    ops[0x76] = 
    ops[0x77] = function op_0x77(tempaddr) {		/* BIT 6,(REGISTER+dd) */
      tstates += 5;
      {
    var bytetemp = readbyte( tempaddr );
    BIT_I( 6, bytetemp, tempaddr );
      }
    };
    ops[0x78] = 
    ops[0x79] = 
    ops[0x7a] = 
    ops[0x7b] = 
    ops[0x7c] = 
    ops[0x7d] = 
    ops[0x7e] = 
    ops[0x7f] = function op_0x7f(tempaddr) {		/* BIT 7,(REGISTER+dd) */
      tstates += 5;
      {
    var bytetemp = readbyte( tempaddr );
    BIT_I( 7, bytetemp, tempaddr );
      }
    };
    ops[0x80] = function op_0x80(tempaddr) {		/* LD B,RES 0,(REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr) & 0xfe;
      writebyte(tempaddr, B);
      };
    ops[0x81] = function op_0x81(tempaddr) {		/* LD C,RES 0,(REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr) & 0xfe;
      writebyte(tempaddr, C);
      };
    ops[0x82] = function op_0x82(tempaddr) {		/* LD D,RES 0,(REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr) & 0xfe;
      writebyte(tempaddr, D);
      };
    ops[0x83] = function op_0x83(tempaddr) {		/* LD E,RES 0,(REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr) & 0xfe;
      writebyte(tempaddr, E);
      };
    ops[0x84] = function op_0x84(tempaddr) {		/* LD H,RES 0,(REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr) & 0xfe;
      writebyte(tempaddr, H);
      };
    ops[0x85] = function op_0x85(tempaddr) {		/* LD L,RES 0,(REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr) & 0xfe;
      writebyte(tempaddr, L);
      };
    ops[0x86] = function op_0x86(tempaddr) {		/* RES 0,(REGISTER+dd) */
      tstates += 8;
      writebyte(tempaddr, readbyte(tempaddr) & 0xfe);
    };
    ops[0x87] = function op_0x87(tempaddr) {		/* LD A,RES 0,(REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr) & 0xfe;
      writebyte(tempaddr, A);
      };
    ops[0x88] = function op_0x88(tempaddr) {		/* LD B,RES 1,(REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr) & 0xfd;
      writebyte(tempaddr, B);
      };
    ops[0x89] = function op_0x89(tempaddr) {		/* LD C,RES 1,(REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr) & 0xfd;
      writebyte(tempaddr, C);
      };
    ops[0x8a] = function op_0x8a(tempaddr) {		/* LD D,RES 1,(REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr) & 0xfd;
      writebyte(tempaddr, D);
      };
    ops[0x8b] = function op_0x8b(tempaddr) {		/* LD E,RES 1,(REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr) & 0xfd;
      writebyte(tempaddr, E);
      };
    ops[0x8c] = function op_0x8c(tempaddr) {		/* LD H,RES 1,(REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr) & 0xfd;
      writebyte(tempaddr, H);
      };
    ops[0x8d] = function op_0x8d(tempaddr) {		/* LD L,RES 1,(REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr) & 0xfd;
      writebyte(tempaddr, L);
      };
    ops[0x8e] = function op_0x8e(tempaddr) {		/* RES 1,(REGISTER+dd) */
      tstates += 8;
      writebyte(tempaddr, readbyte(tempaddr) & 0xfd);
    };
    ops[0x8f] = function op_0x8f(tempaddr) {		/* LD A,RES 1,(REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr) & 0xfd;
      writebyte(tempaddr, A);
      };
    ops[0x90] = function op_0x90(tempaddr) {		/* LD B,RES 2,(REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr) & 0xfb;
      writebyte(tempaddr, B);
      };
    ops[0x91] = function op_0x91(tempaddr) {		/* LD C,RES 2,(REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr) & 0xfb;
      writebyte(tempaddr, C);
      };
    ops[0x92] = function op_0x92(tempaddr) {		/* LD D,RES 2,(REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr) & 0xfb;
      writebyte(tempaddr, D);
      };
    ops[0x93] = function op_0x93(tempaddr) {		/* LD E,RES 2,(REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr) & 0xfb;
      writebyte(tempaddr, E);
      };
    ops[0x94] = function op_0x94(tempaddr) {		/* LD H,RES 2,(REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr) & 0xfb;
      writebyte(tempaddr, H);
      };
    ops[0x95] = function op_0x95(tempaddr) {		/* LD L,RES 2,(REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr) & 0xfb;
      writebyte(tempaddr, L);
      };
    ops[0x96] = function op_0x96(tempaddr) {		/* RES 2,(REGISTER+dd) */
      tstates += 8;
      writebyte(tempaddr, readbyte(tempaddr) & 0xfb);
    };
    ops[0x97] = function op_0x97(tempaddr) {		/* LD A,RES 2,(REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr) & 0xfb;
      writebyte(tempaddr, A);
      };
    ops[0x98] = function op_0x98(tempaddr) {		/* LD B,RES 3,(REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr) & 0xf7;
      writebyte(tempaddr, B);
      };
    ops[0x99] = function op_0x99(tempaddr) {		/* LD C,RES 3,(REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr) & 0xf7;
      writebyte(tempaddr, C);
      };
    ops[0x9a] = function op_0x9a(tempaddr) {		/* LD D,RES 3,(REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr) & 0xf7;
      writebyte(tempaddr, D);
      };
    ops[0x9b] = function op_0x9b(tempaddr) {		/* LD E,RES 3,(REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr) & 0xf7;
      writebyte(tempaddr, E);
      };
    ops[0x9c] = function op_0x9c(tempaddr) {		/* LD H,RES 3,(REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr) & 0xf7;
      writebyte(tempaddr, H);
      };
    ops[0x9d] = function op_0x9d(tempaddr) {		/* LD L,RES 3,(REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr) & 0xf7;
      writebyte(tempaddr, L);
      };
    ops[0x9e] = function op_0x9e(tempaddr) {		/* RES 3,(REGISTER+dd) */
      tstates += 8;
      writebyte(tempaddr, readbyte(tempaddr) & 0xf7);
    };
    ops[0x9f] = function op_0x9f(tempaddr) {		/* LD A,RES 3,(REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr) & 0xf7;
      writebyte(tempaddr, A);
      };
    ops[0xa0] = function op_0xa0(tempaddr) {		/* LD B,RES 4,(REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr) & 0xef;
      writebyte(tempaddr, B);
      };
    ops[0xa1] = function op_0xa1(tempaddr) {		/* LD C,RES 4,(REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr) & 0xef;
      writebyte(tempaddr, C);
      };
    ops[0xa2] = function op_0xa2(tempaddr) {		/* LD D,RES 4,(REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr) & 0xef;
      writebyte(tempaddr, D);
      };
    ops[0xa3] = function op_0xa3(tempaddr) {		/* LD E,RES 4,(REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr) & 0xef;
      writebyte(tempaddr, E);
      };
    ops[0xa4] = function op_0xa4(tempaddr) {		/* LD H,RES 4,(REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr) & 0xef;
      writebyte(tempaddr, H);
      };
    ops[0xa5] = function op_0xa5(tempaddr) {		/* LD L,RES 4,(REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr) & 0xef;
      writebyte(tempaddr, L);
      };
    ops[0xa6] = function op_0xa6(tempaddr) {		/* RES 4,(REGISTER+dd) */
      tstates += 8;
      writebyte(tempaddr, readbyte(tempaddr) & 0xef);
    };
    ops[0xa7] = function op_0xa7(tempaddr) {		/* LD A,RES 4,(REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr) & 0xef;
      writebyte(tempaddr, A);
      };
    ops[0xa8] = function op_0xa8(tempaddr) {		/* LD B,RES 5,(REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr) & 0xdf;
      writebyte(tempaddr, B);
      };
    ops[0xa9] = function op_0xa9(tempaddr) {		/* LD C,RES 5,(REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr) & 0xdf;
      writebyte(tempaddr, C);
      };
    ops[0xaa] = function op_0xaa(tempaddr) {		/* LD D,RES 5,(REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr) & 0xdf;
      writebyte(tempaddr, D);
      };
    ops[0xab] = function op_0xab(tempaddr) {		/* LD E,RES 5,(REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr) & 0xdf;
      writebyte(tempaddr, E);
      };
    ops[0xac] = function op_0xac(tempaddr) {		/* LD H,RES 5,(REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr) & 0xdf;
      writebyte(tempaddr, H);
      };
    ops[0xad] = function op_0xad(tempaddr) {		/* LD L,RES 5,(REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr) & 0xdf;
      writebyte(tempaddr, L);
      };
    ops[0xae] = function op_0xae(tempaddr) {		/* RES 5,(REGISTER+dd) */
      tstates += 8;
      writebyte(tempaddr, readbyte(tempaddr) & 0xdf);
    };
    ops[0xaf] = function op_0xaf(tempaddr) {		/* LD A,RES 5,(REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr) & 0xdf;
      writebyte(tempaddr, A);
      };
    ops[0xb0] = function op_0xb0(tempaddr) {		/* LD B,RES 6,(REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr) & 0xbf;
      writebyte(tempaddr, B);
      };
    ops[0xb1] = function op_0xb1(tempaddr) {		/* LD C,RES 6,(REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr) & 0xbf;
      writebyte(tempaddr, C);
      };
    ops[0xb2] = function op_0xb2(tempaddr) {		/* LD D,RES 6,(REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr) & 0xbf;
      writebyte(tempaddr, D);
      };
    ops[0xb3] = function op_0xb3(tempaddr) {		/* LD E,RES 6,(REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr) & 0xbf;
      writebyte(tempaddr, E);
      };
    ops[0xb4] = function op_0xb4(tempaddr) {		/* LD H,RES 6,(REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr) & 0xbf;
      writebyte(tempaddr, H);
      };
    ops[0xb5] = function op_0xb5(tempaddr) {		/* LD L,RES 6,(REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr) & 0xbf;
      writebyte(tempaddr, L);
      };
    ops[0xb6] = function op_0xb6(tempaddr) {		/* RES 6,(REGISTER+dd) */
      tstates += 8;
      writebyte(tempaddr, readbyte(tempaddr) & 0xbf);
    };
    ops[0xb7] = function op_0xb7(tempaddr) {		/* LD A,RES 6,(REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr) & 0xbf;
      writebyte(tempaddr, A);
      };
    ops[0xb8] = function op_0xb8(tempaddr) {		/* LD B,RES 7,(REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr) & 0x7f;
      writebyte(tempaddr, B);
      };
    ops[0xb9] = function op_0xb9(tempaddr) {		/* LD C,RES 7,(REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr) & 0x7f;
      writebyte(tempaddr, C);
      };
    ops[0xba] = function op_0xba(tempaddr) {		/* LD D,RES 7,(REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr) & 0x7f;
      writebyte(tempaddr, D);
      };
    ops[0xbb] = function op_0xbb(tempaddr) {		/* LD E,RES 7,(REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr) & 0x7f;
      writebyte(tempaddr, E);
      };
    ops[0xbc] = function op_0xbc(tempaddr) {		/* LD H,RES 7,(REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr) & 0x7f;
      writebyte(tempaddr, H);
      };
    ops[0xbd] = function op_0xbd(tempaddr) {		/* LD L,RES 7,(REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr) & 0x7f;
      writebyte(tempaddr, L);
      };
    ops[0xbe] = function op_0xbe(tempaddr) {		/* RES 7,(REGISTER+dd) */
      tstates += 8;
      writebyte(tempaddr, readbyte(tempaddr) & 0x7f);
    };
    ops[0xbf] = function op_0xbf(tempaddr) {		/* LD A,RES 7,(REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr) & 0x7f;
      writebyte(tempaddr, A);
      };
    ops[0xc0] = function op_0xc0(tempaddr) {		/* LD B,SET 0,(REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr) | 0x01;
      writebyte(tempaddr, B);
      };
    ops[0xc1] = function op_0xc1(tempaddr) {		/* LD C,SET 0,(REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr) | 0x01;
      writebyte(tempaddr, C);
      };
    ops[0xc2] = function op_0xc2(tempaddr) {		/* LD D,SET 0,(REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr) | 0x01;
      writebyte(tempaddr, D);
      };
    ops[0xc3] = function op_0xc3(tempaddr) {		/* LD E,SET 0,(REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr) | 0x01;
      writebyte(tempaddr, E);
      };
    ops[0xc4] = function op_0xc4(tempaddr) {		/* LD H,SET 0,(REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr) | 0x01;
      writebyte(tempaddr, H);
      };
    ops[0xc5] = function op_0xc5(tempaddr) {		/* LD L,SET 0,(REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr) | 0x01;
      writebyte(tempaddr, L);
      };
    ops[0xc6] = function op_0xc6(tempaddr) {		/* SET 0,(REGISTER+dd) */
      tstates += 8;
      writebyte(tempaddr, readbyte(tempaddr) | 0x01);
    };
    ops[0xc7] = function op_0xc7(tempaddr) {		/* LD A,SET 0,(REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr) | 0x01;
      writebyte(tempaddr, A);
      };
    ops[0xc8] = function op_0xc8(tempaddr) {		/* LD B,SET 1,(REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr) | 0x02;
      writebyte(tempaddr, B);
      };
    ops[0xc9] = function op_0xc9(tempaddr) {		/* LD C,SET 1,(REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr) | 0x02;
      writebyte(tempaddr, C);
      };
    ops[0xca] = function op_0xca(tempaddr) {		/* LD D,SET 1,(REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr) | 0x02;
      writebyte(tempaddr, D);
      };
    ops[0xcb] = function op_0xcb(tempaddr) {		/* LD E,SET 1,(REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr) | 0x02;
      writebyte(tempaddr, E);
      };
    ops[0xcc] = function op_0xcc(tempaddr) {		/* LD H,SET 1,(REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr) | 0x02;
      writebyte(tempaddr, H);
      };
    ops[0xcd] = function op_0xcd(tempaddr) {		/* LD L,SET 1,(REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr) | 0x02;
      writebyte(tempaddr, L);
      };
    ops[0xce] = function op_0xce(tempaddr) {		/* SET 1,(REGISTER+dd) */
      tstates += 8;
      writebyte(tempaddr, readbyte(tempaddr) | 0x02);
    };
    ops[0xcf] = function op_0xcf(tempaddr) {		/* LD A,SET 1,(REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr) | 0x02;
      writebyte(tempaddr, A);
      };
    ops[0xd0] = function op_0xd0(tempaddr) {		/* LD B,SET 2,(REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr) | 0x04;
      writebyte(tempaddr, B);
      };
    ops[0xd1] = function op_0xd1(tempaddr) {		/* LD C,SET 2,(REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr) | 0x04;
      writebyte(tempaddr, C);
      };
    ops[0xd2] = function op_0xd2(tempaddr) {		/* LD D,SET 2,(REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr) | 0x04;
      writebyte(tempaddr, D);
      };
    ops[0xd3] = function op_0xd3(tempaddr) {		/* LD E,SET 2,(REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr) | 0x04;
      writebyte(tempaddr, E);
      };
    ops[0xd4] = function op_0xd4(tempaddr) {		/* LD H,SET 2,(REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr) | 0x04;
      writebyte(tempaddr, H);
      };
    ops[0xd5] = function op_0xd5(tempaddr) {		/* LD L,SET 2,(REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr) | 0x04;
      writebyte(tempaddr, L);
      };
    ops[0xd6] = function op_0xd6(tempaddr) {		/* SET 2,(REGISTER+dd) */
      tstates += 8;
      writebyte(tempaddr, readbyte(tempaddr) | 0x04);
    };
    ops[0xd7] = function op_0xd7(tempaddr) {		/* LD A,SET 2,(REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr) | 0x04;
      writebyte(tempaddr, A);
      };
    ops[0xd8] = function op_0xd8(tempaddr) {		/* LD B,SET 3,(REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr) | 0x08;
      writebyte(tempaddr, B);
      };
    ops[0xd9] = function op_0xd9(tempaddr) {		/* LD C,SET 3,(REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr) | 0x08;
      writebyte(tempaddr, C);
      };
    ops[0xda] = function op_0xda(tempaddr) {		/* LD D,SET 3,(REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr) | 0x08;
      writebyte(tempaddr, D);
      };
    ops[0xdb] = function op_0xdb(tempaddr) {		/* LD E,SET 3,(REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr) | 0x08;
      writebyte(tempaddr, E);
      };
    ops[0xdc] = function op_0xdc(tempaddr) {		/* LD H,SET 3,(REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr) | 0x08;
      writebyte(tempaddr, H);
      };
    ops[0xdd] = function op_0xdd(tempaddr) {		/* LD L,SET 3,(REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr) | 0x08;
      writebyte(tempaddr, L);
      };
    ops[0xde] = function op_0xde(tempaddr) {		/* SET 3,(REGISTER+dd) */
      tstates += 8;
      writebyte(tempaddr, readbyte(tempaddr) | 0x08);
    };
    ops[0xdf] = function op_0xdf(tempaddr) {		/* LD A,SET 3,(REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr) | 0x08;
      writebyte(tempaddr, A);
      };
    ops[0xe0] = function op_0xe0(tempaddr) {		/* LD B,SET 4,(REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr) | 0x10;
      writebyte(tempaddr, B);
      };
    ops[0xe1] = function op_0xe1(tempaddr) {		/* LD C,SET 4,(REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr) | 0x10;
      writebyte(tempaddr, C);
      };
    ops[0xe2] = function op_0xe2(tempaddr) {		/* LD D,SET 4,(REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr) | 0x10;
      writebyte(tempaddr, D);
      };
    ops[0xe3] = function op_0xe3(tempaddr) {		/* LD E,SET 4,(REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr) | 0x10;
      writebyte(tempaddr, E);
      };
    ops[0xe4] = function op_0xe4(tempaddr) {		/* LD H,SET 4,(REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr) | 0x10;
      writebyte(tempaddr, H);
      };
    ops[0xe5] = function op_0xe5(tempaddr) {		/* LD L,SET 4,(REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr) | 0x10;
      writebyte(tempaddr, L);
      };
    ops[0xe6] = function op_0xe6(tempaddr) {		/* SET 4,(REGISTER+dd) */
      tstates += 8;
      writebyte(tempaddr, readbyte(tempaddr) | 0x10);
    };
    ops[0xe7] = function op_0xe7(tempaddr) {		/* LD A,SET 4,(REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr) | 0x10;
      writebyte(tempaddr, A);
      };
    ops[0xe8] = function op_0xe8(tempaddr) {		/* LD B,SET 5,(REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr) | 0x20;
      writebyte(tempaddr, B);
      };
    ops[0xe9] = function op_0xe9(tempaddr) {		/* LD C,SET 5,(REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr) | 0x20;
      writebyte(tempaddr, C);
      };
    ops[0xea] = function op_0xea(tempaddr) {		/* LD D,SET 5,(REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr) | 0x20;
      writebyte(tempaddr, D);
      };
    ops[0xeb] = function op_0xeb(tempaddr) {		/* LD E,SET 5,(REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr) | 0x20;
      writebyte(tempaddr, E);
      };
    ops[0xec] = function op_0xec(tempaddr) {		/* LD H,SET 5,(REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr) | 0x20;
      writebyte(tempaddr, H);
      };
    ops[0xed] = function op_0xed(tempaddr) {		/* LD L,SET 5,(REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr) | 0x20;
      writebyte(tempaddr, L);
      };
    ops[0xee] = function op_0xee(tempaddr) {		/* SET 5,(REGISTER+dd) */
      tstates += 8;
      writebyte(tempaddr, readbyte(tempaddr) | 0x20);
    };
    ops[0xef] = function op_0xef(tempaddr) {		/* LD A,SET 5,(REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr) | 0x20;
      writebyte(tempaddr, A);
      };
    ops[0xf0] = function op_0xf0(tempaddr) {		/* LD B,SET 6,(REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr) | 0x40;
      writebyte(tempaddr, B);
      };
    ops[0xf1] = function op_0xf1(tempaddr) {		/* LD C,SET 6,(REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr) | 0x40;
      writebyte(tempaddr, C);
      };
    ops[0xf2] = function op_0xf2(tempaddr) {		/* LD D,SET 6,(REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr) | 0x40;
      writebyte(tempaddr, D);
      };
    ops[0xf3] = function op_0xf3(tempaddr) {		/* LD E,SET 6,(REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr) | 0x40;
      writebyte(tempaddr, E);
      };
    ops[0xf4] = function op_0xf4(tempaddr) {		/* LD H,SET 6,(REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr) | 0x40;
      writebyte(tempaddr, H);
      };
    ops[0xf5] = function op_0xf5(tempaddr) {		/* LD L,SET 6,(REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr) | 0x40;
      writebyte(tempaddr, L);
      };
    ops[0xf6] = function op_0xf6(tempaddr) {		/* SET 6,(REGISTER+dd) */
      tstates += 8;
      writebyte(tempaddr, readbyte(tempaddr) | 0x40);
    };
    ops[0xf7] = function op_0xf7(tempaddr) {		/* LD A,SET 6,(REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr) | 0x40;
      writebyte(tempaddr, A);
      };
    ops[0xf8] = function op_0xf8(tempaddr) {		/* LD B,SET 7,(REGISTER+dd) */
      tstates += 8;
      B=readbyte(tempaddr) | 0x80;
      writebyte(tempaddr, B);
      };
    ops[0xf9] = function op_0xf9(tempaddr) {		/* LD C,SET 7,(REGISTER+dd) */
      tstates += 8;
      C=readbyte(tempaddr) | 0x80;
      writebyte(tempaddr, C);
      };
    ops[0xfa] = function op_0xfa(tempaddr) {		/* LD D,SET 7,(REGISTER+dd) */
      tstates += 8;
      D=readbyte(tempaddr) | 0x80;
      writebyte(tempaddr, D);
      };
    ops[0xfb] = function op_0xfb(tempaddr) {		/* LD E,SET 7,(REGISTER+dd) */
      tstates += 8;
      E=readbyte(tempaddr) | 0x80;
      writebyte(tempaddr, E);
      };
    ops[0xfc] = function op_0xfc(tempaddr) {		/* LD H,SET 7,(REGISTER+dd) */
      tstates += 8;
      H=readbyte(tempaddr) | 0x80;
      writebyte(tempaddr, H);
      };
    ops[0xfd] = function op_0xfd(tempaddr) {		/* LD L,SET 7,(REGISTER+dd) */
      tstates += 8;
      L=readbyte(tempaddr) | 0x80;
      writebyte(tempaddr, L);
      };
    ops[0xfe] = function op_0xfe(tempaddr) {		/* SET 7,(REGISTER+dd) */
      tstates += 8;
      writebyte(tempaddr, readbyte(tempaddr) | 0x80);
    };
    ops[0xff] = function op_0xff(tempaddr) {		/* LD A,SET 7,(REGISTER+dd) */
      tstates += 8;
      A=readbyte(tempaddr) | 0x80;
      writebyte(tempaddr, A);
      };
    ops[256] = function() {};        /* All other opcodes are NOPD */
