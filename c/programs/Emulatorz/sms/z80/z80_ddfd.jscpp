/* opcodes_ddfd.c Z80 {DD,FD}xx opcodes
   Copyright (c) 1999-2008 Philip Kendall, Matthew Westcott

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
    Contact details: <matthew@west.co.tt>
    Matthew Westcott, 14 Daisy Hill Drive, Adlington, Chorley, Lancs PR6 9NE UNITED KINGDOM

*/

/* NB: this file is autogenerated by 'z80.pl' from 'opcodes_ddfd.dat',
   and included in 'z80_ops.jscpp' */

    ops[0x09] = function op_0x09(tempaddr) {		/* ADD REGISTER,BC */
      ADD16(REGISTERR,BCR,REGISTERH,REGISTERL);
    };
    ops[0x19] = function op_0x19(tempaddr) {		/* ADD REGISTER,DE */
      ADD16(REGISTERR,DER,REGISTERH,REGISTERL);
    };
    ops[0x21] = function op_0x21(tempaddr) {		/* LD REGISTER,nnnn */
      tstates+=6;
      REGISTERL=readbyte(PC++);
      PC &= 0xffff;
      REGISTERH=readbyte(PC++);
      PC &= 0xffff;
    };
    ops[0x22] = function op_0x22(tempaddr) {		/* LD (nnnn),REGISTER */
      LD16_NNRR(REGISTERL,REGISTERH);
    };
    ops[0x23] = function op_0x23(tempaddr) {		/* INC REGISTER */
      tstates += 2;
      var wordtemp = (REGISTERR + 1) & 0xffff;
      REGISTERH = wordtemp >> 8;
      REGISTERL = wordtemp & 0xff;
    };
    ops[0x24] = function op_0x24(tempaddr) {		/* INC REGISTERH */
      INC(REGISTERH);
    };
    ops[0x25] = function op_0x25(tempaddr) {		/* DEC REGISTERH */
      DEC(REGISTERH);
    };
    ops[0x26] = function op_0x26(tempaddr) {		/* LD REGISTERH,nn */
      tstates+=3;
      REGISTERH=readbyte(PC++); PC &= 0xffff;
    };
    ops[0x29] = function op_0x29(tempaddr) {		/* ADD REGISTER,REGISTER */
      ADD16(REGISTERR,REGISTERR,REGISTERH,REGISTERL);
    };
    ops[0x2a] = function op_0x2a(tempaddr) {		/* LD REGISTER,(nnnn) */
      LD16_RRNN(REGISTERL,REGISTERH);
    };
    ops[0x2b] = function op_0x2b(tempaddr) {		/* DEC REGISTER */
      tstates += 2;
      var wordtemp = (REGISTERR - 1) & 0xffff;
      REGISTERH = wordtemp >> 8;
      REGISTERL = wordtemp & 0xff;
    };
    ops[0x2c] = function op_0x2c(tempaddr) {		/* INC REGISTERL */
      INC(REGISTERL);
    };
    ops[0x2d] = function op_0x2d(tempaddr) {		/* DEC REGISTERL */
      DEC(REGISTERL);
    };
    ops[0x2e] = function op_0x2e(tempaddr) {		/* LD REGISTERL,nn */
      tstates+=3;
      REGISTERL=readbyte(PC++); PC &= 0xffff;
    };
    ops[0x34] = function op_0x34(tempaddr) {		/* INC (REGISTER+dd) */
      tstates += 15;        /* FIXME: how is this contended? */
      {
    var wordtemp =
        (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff;
    PC &= 0xffff;
    var bytetemp = readbyte( wordtemp );
    INC(bytetemp);
    writebyte(wordtemp,bytetemp);
      }
    };
    ops[0x35] = function op_0x35(tempaddr) {		/* DEC (REGISTER+dd) */
      tstates += 15;        /* FIXME: how is this contended? */
      {
    var wordtemp =
        (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff;
    PC &= 0xffff;
    var bytetemp = readbyte( wordtemp );
    DEC(bytetemp);
    writebyte(wordtemp,bytetemp);
      }
    };
    ops[0x36] = function op_0x36(tempaddr) {		/* LD (REGISTER+dd),nn */
      tstates += 11;        /* FIXME: how is this contended? */
      {
    var wordtemp =
        (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff;
    PC &= 0xffff;
    writebyte(wordtemp,readbyte(PC++));
    PC &= 0xffff;
      }
    };
    ops[0x39] = function op_0x39(tempaddr) {		/* ADD REGISTER,SP */
      ADD16(REGISTERR,SPR,REGISTERH,REGISTERL);
    };
    ops[0x44] = function op_0x44(tempaddr) {		/* LD B,REGISTERH */
      B=REGISTERH;
    };
    ops[0x45] = function op_0x45(tempaddr) {		/* LD B,REGISTERL */
      B=REGISTERL;
    };
    ops[0x46] = function op_0x46(tempaddr) {		/* LD B,(REGISTER+dd) */
      tstates += 11;        /* FIXME: how is this contended? */
      B = readbyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff );
      PC &= 0xffff;
    };
    ops[0x4c] = function op_0x4c(tempaddr) {		/* LD C,REGISTERH */
      C=REGISTERH;
    };
    ops[0x4d] = function op_0x4d(tempaddr) {		/* LD C,REGISTERL */
      C=REGISTERL;
    };
    ops[0x4e] = function op_0x4e(tempaddr) {		/* LD C,(REGISTER+dd) */
      tstates += 11;        /* FIXME: how is this contended? */
      C = readbyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff );
      PC &= 0xffff;
    };
    ops[0x54] = function op_0x54(tempaddr) {		/* LD D,REGISTERH */
      D=REGISTERH;
    };
    ops[0x55] = function op_0x55(tempaddr) {		/* LD D,REGISTERL */
      D=REGISTERL;
    };
    ops[0x56] = function op_0x56(tempaddr) {		/* LD D,(REGISTER+dd) */
      tstates += 11;        /* FIXME: how is this contended? */
      D = readbyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff );
      PC &= 0xffff;
    };
    ops[0x5c] = function op_0x5c(tempaddr) {		/* LD E,REGISTERH */
      E=REGISTERH;
    };
    ops[0x5d] = function op_0x5d(tempaddr) {		/* LD E,REGISTERL */
      E=REGISTERL;
    };
    ops[0x5e] = function op_0x5e(tempaddr) {		/* LD E,(REGISTER+dd) */
      tstates += 11;        /* FIXME: how is this contended? */
      E = readbyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff );
      PC &= 0xffff;
    };
    ops[0x60] = function op_0x60(tempaddr) {		/* LD REGISTERH,B */
      REGISTERH=B;
    };
    ops[0x61] = function op_0x61(tempaddr) {		/* LD REGISTERH,C */
      REGISTERH=C;
    };
    ops[0x62] = function op_0x62(tempaddr) {		/* LD REGISTERH,D */
      REGISTERH=D;
    };
    ops[0x63] = function op_0x63(tempaddr) {		/* LD REGISTERH,E */
      REGISTERH=E;
    };
    ops[0x64] = function op_0x64(tempaddr) {		/* LD REGISTERH,REGISTERH */
    };
    ops[0x65] = function op_0x65(tempaddr) {		/* LD REGISTERH,REGISTERL */
      REGISTERH=REGISTERL;
    };
    ops[0x66] = function op_0x66(tempaddr) {		/* LD H,(REGISTER+dd) */
      tstates += 11;        /* FIXME: how is this contended? */
      H = readbyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff );
      PC &= 0xffff;
    };
    ops[0x67] = function op_0x67(tempaddr) {		/* LD REGISTERH,A */
      REGISTERH=A;
    };
    ops[0x68] = function op_0x68(tempaddr) {		/* LD REGISTERL,B */
      REGISTERL=B;
    };
    ops[0x69] = function op_0x69(tempaddr) {		/* LD REGISTERL,C */
      REGISTERL=C;
    };
    ops[0x6a] = function op_0x6a(tempaddr) {		/* LD REGISTERL,D */
      REGISTERL=D;
    };
    ops[0x6b] = function op_0x6b(tempaddr) {		/* LD REGISTERL,E */
      REGISTERL=E;
    };
    ops[0x6c] = function op_0x6c(tempaddr) {		/* LD REGISTERL,REGISTERH */
      REGISTERL=REGISTERH;
    };
    ops[0x6d] = function op_0x6d(tempaddr) {		/* LD REGISTERL,REGISTERL */
    };
    ops[0x6e] = function op_0x6e(tempaddr) {		/* LD L,(REGISTER+dd) */
      tstates += 11;        /* FIXME: how is this contended? */
      L = readbyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff );
      PC &= 0xffff;
    };
    ops[0x6f] = function op_0x6f(tempaddr) {		/* LD REGISTERL,A */
      REGISTERL=A;
    };
    ops[0x70] = function op_0x70(tempaddr) {		/* LD (REGISTER+dd),B */
      tstates += 11;        /* FIXME: how is this contended? */
      writebyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff, B );
      PC &= 0xffff;
    };
    ops[0x71] = function op_0x71(tempaddr) {		/* LD (REGISTER+dd),C */
      tstates += 11;        /* FIXME: how is this contended? */
      writebyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff, C );
      PC &= 0xffff;
    };
    ops[0x72] = function op_0x72(tempaddr) {		/* LD (REGISTER+dd),D */
      tstates += 11;        /* FIXME: how is this contended? */
      writebyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff, D );
      PC &= 0xffff;
    };
    ops[0x73] = function op_0x73(tempaddr) {		/* LD (REGISTER+dd),E */
      tstates += 11;        /* FIXME: how is this contended? */
      writebyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff, E );
      PC &= 0xffff;
    };
    ops[0x74] = function op_0x74(tempaddr) {		/* LD (REGISTER+dd),H */
      tstates += 11;        /* FIXME: how is this contended? */
      writebyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff, H );
      PC &= 0xffff;
    };
    ops[0x75] = function op_0x75(tempaddr) {		/* LD (REGISTER+dd),L */
      tstates += 11;        /* FIXME: how is this contended? */
      writebyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff, L );
      PC &= 0xffff;
    };
    ops[0x77] = function op_0x77(tempaddr) {		/* LD (REGISTER+dd),A */
      tstates += 11;        /* FIXME: how is this contended? */
      writebyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff, A );
      PC &= 0xffff;
    };
    ops[0x7c] = function op_0x7c(tempaddr) {		/* LD A,REGISTERH */
      A=REGISTERH;
    };
    ops[0x7d] = function op_0x7d(tempaddr) {		/* LD A,REGISTERL */
      A=REGISTERL;
    };
    ops[0x7e] = function op_0x7e(tempaddr) {		/* LD A,(REGISTER+dd) */
      tstates += 11;        /* FIXME: how is this contended? */
      A = readbyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff );
      PC &= 0xffff;
    };
    ops[0x84] = function op_0x84(tempaddr) {		/* ADD A,REGISTERH */
      ADD(REGISTERH);
    };
    ops[0x85] = function op_0x85(tempaddr) {		/* ADD A,REGISTERL */
      ADD(REGISTERL);
    };
    ops[0x86] = function op_0x86(tempaddr) {		/* ADD A,(REGISTER+dd) */
      tstates += 11;        /* FIXME: how is this contended? */
      {
    var bytetemp = 
        readbyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff );
        PC &= 0xffff;
    ADD(bytetemp);
      }
    };
    ops[0x8c] = function op_0x8c(tempaddr) {		/* ADC A,REGISTERH */
      ADC(REGISTERH);
    };
    ops[0x8d] = function op_0x8d(tempaddr) {		/* ADC A,REGISTERL */
      ADC(REGISTERL);
    };
    ops[0x8e] = function op_0x8e(tempaddr) {		/* ADC A,(REGISTER+dd) */
      tstates += 11;        /* FIXME: how is this contended? */
      {
    var bytetemp = 
        readbyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff );
        PC &= 0xffff;
    ADC(bytetemp);
      }
    };
    ops[0x94] = function op_0x94(tempaddr) {		/* SUB A,REGISTERH */
      SUB(REGISTERH);
    };
    ops[0x95] = function op_0x95(tempaddr) {		/* SUB A,REGISTERL */
      SUB(REGISTERL);
    };
    ops[0x96] = function op_0x96(tempaddr) {		/* SUB A,(REGISTER+dd) */
      tstates += 11;        /* FIXME: how is this contended? */
      {
    var bytetemp = 
        readbyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff );
        PC &= 0xffff;
    SUB(bytetemp);
      }
    };
    ops[0x9c] = function op_0x9c(tempaddr) {		/* SBC A,REGISTERH */
      SBC(REGISTERH);
    };
    ops[0x9d] = function op_0x9d(tempaddr) {		/* SBC A,REGISTERL */
      SBC(REGISTERL);
    };
    ops[0x9e] = function op_0x9e(tempaddr) {		/* SBC A,(REGISTER+dd) */
      tstates += 11;        /* FIXME: how is this contended? */
      {
    var bytetemp = 
        readbyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff );
        PC &= 0xffff;
    SBC(bytetemp);
      }
    };
    ops[0xa4] = function op_0xa4(tempaddr) {		/* AND A,REGISTERH */
      AND(REGISTERH);
    };
    ops[0xa5] = function op_0xa5(tempaddr) {		/* AND A,REGISTERL */
      AND(REGISTERL);
    };
    ops[0xa6] = function op_0xa6(tempaddr) {		/* AND A,(REGISTER+dd) */
      tstates += 11;        /* FIXME: how is this contended? */
      {
    var bytetemp = 
        readbyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff );
        PC &= 0xffff;
    AND(bytetemp);
      }
    };
    ops[0xac] = function op_0xac(tempaddr) {		/* XOR A,REGISTERH */
      XOR(REGISTERH);
    };
    ops[0xad] = function op_0xad(tempaddr) {		/* XOR A,REGISTERL */
      XOR(REGISTERL);
    };
    ops[0xae] = function op_0xae(tempaddr) {		/* XOR A,(REGISTER+dd) */
      tstates += 11;        /* FIXME: how is this contended? */
      {
    var bytetemp = 
        readbyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff );
        PC &= 0xffff;
    XOR(bytetemp);
      }
    };
    ops[0xb4] = function op_0xb4(tempaddr) {		/* OR A,REGISTERH */
      OR(REGISTERH);
    };
    ops[0xb5] = function op_0xb5(tempaddr) {		/* OR A,REGISTERL */
      OR(REGISTERL);
    };
    ops[0xb6] = function op_0xb6(tempaddr) {		/* OR A,(REGISTER+dd) */
      tstates += 11;        /* FIXME: how is this contended? */
      {
    var bytetemp = 
        readbyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff );
        PC &= 0xffff;
    OR(bytetemp);
      }
    };
    ops[0xbc] = function op_0xbc(tempaddr) {		/* CP A,REGISTERH */
      CP(REGISTERH);
    };
    ops[0xbd] = function op_0xbd(tempaddr) {		/* CP A,REGISTERL */
      CP(REGISTERL);
    };
    ops[0xbe] = function op_0xbe(tempaddr) {		/* CP A,(REGISTER+dd) */
      tstates += 11;        /* FIXME: how is this contended? */
      {
    var bytetemp = 
        readbyte( (REGISTER + sign_extend(readbyte( PC++ ))) & 0xffff );
        PC &= 0xffff;
    CP(bytetemp);
      }
    };
    ops[0xcb] = function op_0xcb(tempaddr) {		/* shift DDFDCB */
      /* FIXME: contention here is just a guess */
      {
    var opcode3;
    tstates+=7;
    tempaddr =
        REGISTER + sign_extend(readbyte_internal( PC++ ));
    PC &= 0xffff;
    opcode3 = readbyte_internal( PC++ );
    PC &= 0xffff;
    z80_ddfdcbxx(opcode3,tempaddr);
      }
    };
    ops[0xe1] = function op_0xe1(tempaddr) {		/* POP REGISTER */
      POP16(REGISTERL,REGISTERH);
    };
    ops[0xe3] = function op_0xe3(tempaddr) {		/* EX (SP),REGISTER */
      {
    var bytetempl = readbyte( SP     ),
                     bytetemph = readbyte( SP + 1 );
    tstates+=15;
    writebyte(SP+1,REGISTERH); writebyte(SP,REGISTERL);
    REGISTERL=bytetempl; REGISTERH=bytetemph;
      }
    };
    ops[0xe5] = function op_0xe5(tempaddr) {		/* PUSH REGISTER */
      tstates++;
      PUSH16(REGISTERL,REGISTERH);
    };
    ops[0xe9] = function op_0xe9(tempaddr) {		/* JP REGISTER */
      PC=REGISTER;		/* NB: NOT INDIRECT! */
    };
    ops[0xf9] = function op_0xf9(tempaddr) {		/* LD SP,REGISTER */
      tstates += 2;
      SP=REGISTER;
    };
    ops[256] = function z80_ddfd_default() {        /* Instruction did not involve H or L, so backtrack
               one instruction and parse again */
      PC--;        /* FIXME: will be contended again */
      PC &= 0xffff;
      R--;        /* Decrement the R register as well */
      R &= 0x7f;
    }
